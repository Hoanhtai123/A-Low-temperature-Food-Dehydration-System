
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb0  08003cb0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cb0  08003cb0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cb0  08003cb0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000007c  08003d34  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003d34  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9ea  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c40  00000000  00000000  0002ba8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002e310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017cbb  00000000  00000000  0002ee68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a87  00000000  00000000  00046b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a901  00000000  00000000  000505aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000daeab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003760  00000000  00000000  000daf28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c00 	.word	0x08003c00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08003c00 	.word	0x08003c00

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <DWT_Delay_Init>:
uint8_t Presence = 0;
int checkval = 0;
#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <DWT_Delay_Init+0x58>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <DWT_Delay_Init+0x58>)
 800074a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800074e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <DWT_Delay_Init+0x58>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	4a10      	ldr	r2, [pc, #64]	; (8000798 <DWT_Delay_Init+0x58>)
 8000756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800075a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <DWT_Delay_Init+0x5c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <DWT_Delay_Init+0x5c>)
 8000762:	f023 0301 	bic.w	r3, r3, #1
 8000766:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <DWT_Delay_Init+0x5c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <DWT_Delay_Init+0x5c>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <DWT_Delay_Init+0x5c>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800077a:	bf00      	nop
     __ASM volatile ("NOP");
 800077c:	bf00      	nop
  __ASM volatile ("NOP");
 800077e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <DWT_Delay_Init+0x5c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000788:	2300      	movs	r3, #0
 800078a:	e000      	b.n	800078e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800078c:	2301      	movs	r3, #1
  }
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000edf0 	.word	0xe000edf0
 800079c:	e0001000 	.word	0xe0001000

080007a0 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <delay+0x3c>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80007ae:	f001 fdb9 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 80007b2:	4602      	mov	r2, r0
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <delay+0x40>)
 80007b6:	fba3 2302 	umull	r2, r3, r3, r2
 80007ba:	0c9b      	lsrs	r3, r3, #18
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80007c4:	bf00      	nop
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <delay+0x3c>)
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	1ad2      	subs	r2, r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d3f8      	bcc.n	80007c6 <delay+0x26>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	e0001000 	.word	0xe0001000
 80007e0:	431bde83 	.word	0x431bde83

080007e4 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2302      	movs	r3, #2
 8000808:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 fff7 	bl	8001804 <HAL_GPIO_Init>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	4619      	mov	r1, r3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 ffda 	bl	8001804 <HAL_GPIO_Init>
}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <DHT_Start>:


void DHT_Start (void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 800085c:	f7ff ff70 	bl	8000740 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <DHT_Start+0x5c>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <DHT_Start+0x60>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	4610      	mov	r0, r2
 800086c:	f7ff ffba 	bl	80007e4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <DHT_Start+0x5c>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <DHT_Start+0x60>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	f001 f933 	bl	8001ae6 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000880:	f244 6050 	movw	r0, #18000	; 0x4650
 8000884:	f7ff ff8c 	bl	80007a0 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <DHT_Start+0x5c>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <DHT_Start+0x60>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f001 f927 	bl	8001ae6 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000898:	2014      	movs	r0, #20
 800089a:	f7ff ff81 	bl	80007a0 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <DHT_Start+0x5c>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <DHT_Start+0x60>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff ffb8 	bl	800081e <Set_Pin_Input>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000c4 	.word	0x200000c4
 80008b8:	200000cc 	.word	0x200000cc

080008bc <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	int count =0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
	uint8_t Response = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	70fb      	strb	r3, [r7, #3]
	delay (40);
 80008ca:	2028      	movs	r0, #40	; 0x28
 80008cc:	f7ff ff68 	bl	80007a0 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <DHT_Check_Response+0x88>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <DHT_Check_Response+0x8c>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	4610      	mov	r0, r2
 80008dc:	f001 f8ec 	bl	8001ab8 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d11d      	bne.n	8000922 <DHT_Check_Response+0x66>
	{
		delay (80);
 80008e6:	2050      	movs	r0, #80	; 0x50
 80008e8:	f7ff ff5a 	bl	80007a0 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <DHT_Check_Response+0x88>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <DHT_Check_Response+0x8c>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	4610      	mov	r0, r2
 80008f8:	f001 f8de 	bl	8001ab8 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <DHT_Check_Response+0x4c>
 8000902:	2301      	movs	r3, #1
 8000904:	70fb      	strb	r3, [r7, #3]
 8000906:	e00c      	b.n	8000922 <DHT_Check_Response+0x66>
		else Response = -1;
 8000908:	23ff      	movs	r3, #255	; 0xff
 800090a:	70fb      	strb	r3, [r7, #3]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))){	// wait for the pin to go low
 800090c:	e009      	b.n	8000922 <DHT_Check_Response+0x66>
		count++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3301      	adds	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
		if(count > 10000) return -1;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f242 7210 	movw	r2, #10000	; 0x2710
 800091a:	4293      	cmp	r3, r2
 800091c:	dd01      	ble.n	8000922 <DHT_Check_Response+0x66>
 800091e:	23ff      	movs	r3, #255	; 0xff
 8000920:	e00b      	b.n	800093a <DHT_Check_Response+0x7e>
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))){	// wait for the pin to go low
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <DHT_Check_Response+0x88>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <DHT_Check_Response+0x8c>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	4619      	mov	r1, r3
 800092c:	4610      	mov	r0, r2
 800092e:	f001 f8c3 	bl	8001ab8 <HAL_GPIO_ReadPin>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1ea      	bne.n	800090e <DHT_Check_Response+0x52>
	}


	return Response;
 8000938:	78fb      	ldrb	r3, [r7, #3]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000c4 	.word	0x200000c4
 8000948:	200000cc 	.word	0x200000cc

0800094c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	int count =0;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000956:	2300      	movs	r3, #0
 8000958:	70bb      	strb	r3, [r7, #2]
 800095a:	e05a      	b.n	8000a12 <DHT_Read+0xc6>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))){   // wait for the pin to go high
			count++;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
			if(count >10000){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f242 7210 	movw	r2, #10000	; 0x2710
 8000968:	4293      	cmp	r3, r2
 800096a:	dd03      	ble.n	8000974 <DHT_Read+0x28>
				i=-1;
 800096c:	23ff      	movs	r3, #255	; 0xff
 800096e:	70fb      	strb	r3, [r7, #3]
				return i;
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	e052      	b.n	8000a1a <DHT_Read+0xce>
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))){   // wait for the pin to go high
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <DHT_Read+0xd8>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <DHT_Read+0xdc>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	4610      	mov	r0, r2
 8000980:	f001 f89a 	bl	8001ab8 <HAL_GPIO_ReadPin>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0e8      	beq.n	800095c <DHT_Read+0x10>
			}
		}
		delay (40);   // wait for 40 us
 800098a:	2028      	movs	r0, #40	; 0x28
 800098c:	f7ff ff08 	bl	80007a0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <DHT_Read+0xd8>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <DHT_Read+0xdc>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	4610      	mov	r0, r2
 800099c:	f001 f88c 	bl	8001ab8 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10e      	bne.n	80009c4 <DHT_Read+0x78>
		{
			i&= ~(1<<(7-j));   // write 0
 80009a6:	78bb      	ldrb	r3, [r7, #2]
 80009a8:	f1c3 0307 	rsb	r3, r3, #7
 80009ac:	2201      	movs	r2, #1
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009bc:	4013      	ands	r3, r2
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	70fb      	strb	r3, [r7, #3]
 80009c2:	e018      	b.n	80009f6 <DHT_Read+0xaa>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80009c4:	78bb      	ldrb	r3, [r7, #2]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2201      	movs	r2, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b25b      	sxtb	r3, r3
 80009da:	70fb      	strb	r3, [r7, #3]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))){	// wait for the pin to go low
 80009dc:	e00b      	b.n	80009f6 <DHT_Read+0xaa>
			count++;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3301      	adds	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
			if(count >10000){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80009ea:	4293      	cmp	r3, r2
 80009ec:	dd03      	ble.n	80009f6 <DHT_Read+0xaa>
				i=-1;
 80009ee:	23ff      	movs	r3, #255	; 0xff
 80009f0:	70fb      	strb	r3, [r7, #3]
				return i;
 80009f2:	78fb      	ldrb	r3, [r7, #3]
 80009f4:	e011      	b.n	8000a1a <DHT_Read+0xce>
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))){	// wait for the pin to go low
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <DHT_Read+0xd8>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <DHT_Read+0xdc>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	4619      	mov	r1, r3
 8000a00:	4610      	mov	r0, r2
 8000a02:	f001 f859 	bl	8001ab8 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1e8      	bne.n	80009de <DHT_Read+0x92>
	for (j=0;j<8;j++)
 8000a0c:	78bb      	ldrb	r3, [r7, #2]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	70bb      	strb	r3, [r7, #2]
 8000a12:	78bb      	ldrb	r3, [r7, #2]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	d9ad      	bls.n	8000974 <DHT_Read+0x28>
			}
		}
	}
	return i;
 8000a18:	78fb      	ldrb	r3, [r7, #3]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000c4 	.word	0x200000c4
 8000a28:	200000cc 	.word	0x200000cc

08000a2c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data, GPIO_TypeDef* PORT, uint16_t PIN  )
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4613      	mov	r3, r2
 8000a38:	80fb      	strh	r3, [r7, #6]
	DHT_PORT = PORT;
 8000a3a:	4a28      	ldr	r2, [pc, #160]	; (8000adc <DHT_GetData+0xb0>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	6013      	str	r3, [r2, #0]
	DHT_PIN = PIN;
 8000a40:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <DHT_GetData+0xb4>)
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	8013      	strh	r3, [r2, #0]
    DHT_Start ();
 8000a46:	f7ff ff07 	bl	8000858 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000a4a:	f7ff ff37 	bl	80008bc <DHT_Check_Response>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <DHT_GetData+0xb8>)
 8000a54:	701a      	strb	r2, [r3, #0]
	if(Presence == -1) {
		DHT_Data->Humidity=-1;
		DHT_Data->Temperature =-1;
		return;
	}
	Rh_byte1 = DHT_Read ();
 8000a56:	f7ff ff79 	bl	800094c <DHT_Read>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <DHT_GetData+0xbc>)
 8000a60:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000a62:	f7ff ff73 	bl	800094c <DHT_Read>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <DHT_GetData+0xc0>)
 8000a6c:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000a6e:	f7ff ff6d 	bl	800094c <DHT_Read>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <DHT_GetData+0xc4>)
 8000a78:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000a7a:	f7ff ff67 	bl	800094c <DHT_Read>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <DHT_GetData+0xc8>)
 8000a84:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000a86:	f7ff ff61 	bl	800094c <DHT_Read>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <DHT_GetData+0xcc>)
 8000a90:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <DHT_GetData+0xcc>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <DHT_GetData+0xbc>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <DHT_GetData+0xc0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <DHT_GetData+0xc4>)
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <DHT_GetData+0xc8>)
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4299      	cmp	r1, r3
 8000ab2:	d10f      	bne.n	8000ad4 <DHT_GetData+0xa8>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <DHT_GetData+0xc4>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fbfd 	bl	80002b8 <__aeabi_ui2f>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <DHT_GetData+0xbc>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fbf5 	bl	80002b8 <__aeabi_ui2f>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000c4 	.word	0x200000c4
 8000ae0:	200000cc 	.word	0x200000cc
 8000ae4:	20000098 	.word	0x20000098
 8000ae8:	200000c0 	.word	0x200000c0
 8000aec:	200000c9 	.word	0x200000c9
 8000af0:	200000c8 	.word	0x200000c8
 8000af4:	200000ce 	.word	0x200000ce
 8000af8:	200000ca 	.word	0x200000ca

08000afc <Tim_out>:
//sTask SCH_tasks_G[SCH_MAX_TASKS];
//char uart_buf[50];
//int uart_buf_len;


void Tim_out(void){
 8000afc:	b5b0      	push	{r4, r5, r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	//while(DHT11_Data.Humidity == -1 && DHT11_Data.Temperature == -1){
	while(DHT_Read() == 2){
 8000b00:	e020      	b.n	8000b44 <Tim_out+0x48>
		buf_len = sprintf(buf, "\033[2J]	");
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <Tim_out+0x58>)
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <Tim_out+0x5c>)
 8000b06:	6810      	ldr	r0, [r2, #0]
 8000b08:	6018      	str	r0, [r3, #0]
 8000b0a:	8891      	ldrh	r1, [r2, #4]
 8000b0c:	7992      	ldrb	r2, [r2, #6]
 8000b0e:	8099      	strh	r1, [r3, #4]
 8000b10:	719a      	strb	r2, [r3, #6]
 8000b12:	2206      	movs	r2, #6
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <Tim_out+0x60>)
 8000b16:	601a      	str	r2, [r3, #0]
		buf_len = sprintf(buf, " Time out     \r\n");
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <Tim_out+0x58>)
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <Tim_out+0x64>)
 8000b1c:	4615      	mov	r5, r2
 8000b1e:	461c      	mov	r4, r3
 8000b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b22:	6028      	str	r0, [r5, #0]
 8000b24:	6069      	str	r1, [r5, #4]
 8000b26:	60aa      	str	r2, [r5, #8]
 8000b28:	60eb      	str	r3, [r5, #12]
 8000b2a:	7823      	ldrb	r3, [r4, #0]
 8000b2c:	742b      	strb	r3, [r5, #16]
 8000b2e:	2210      	movs	r2, #16
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <Tim_out+0x60>)
 8000b32:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <Tim_out+0x60>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	2364      	movs	r3, #100	; 0x64
 8000b3c:	4905      	ldr	r1, [pc, #20]	; (8000b54 <Tim_out+0x58>)
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <Tim_out+0x68>)
 8000b40:	f002 f87b 	bl	8002c3a <HAL_UART_Transmit>
	while(DHT_Read() == 2){
 8000b44:	f7ff ff02 	bl	800094c <DHT_Read>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d0d9      	beq.n	8000b02 <Tim_out+0x6>
	}

}
 8000b4e:	bf00      	nop
 8000b50:	bdb0      	pop	{r4, r5, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000e0 	.word	0x200000e0
 8000b58:	08003c18 	.word	0x08003c18
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	08003c20 	.word	0x08003c20
 8000b64:	2000015c 	.word	0x2000015c

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 fc64 	bl	8001438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f80c 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f000 f8c2 	bl	8000cfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b78:	f000 f896 	bl	8000ca8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b7c:	f000 f848 	bl	8000c10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b80:	4801      	ldr	r0, [pc, #4]	; (8000b88 <main+0x20>)
 8000b82:	f001 fc6f 	bl	8002464 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <main+0x1e>
 8000b88:	20000114 	.word	0x20000114

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b090      	sub	sp, #64	; 0x40
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	2228      	movs	r2, #40	; 0x28
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 fc16 	bl	80033cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bc2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 ffdd 	bl	8001b8c <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bd8:	f000 fae4 	bl	80011a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2302      	movs	r3, #2
 8000be2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fa48 	bl	800208c <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c02:	f000 facf 	bl	80011a4 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3740      	adds	r7, #64	; 0x40
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c36:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c44:	2209      	movs	r2, #9
 8000c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c56:	f001 fbb5 	bl	80023c4 <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c60:	f000 faa0 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c72:	f001 fd51 	bl	8002718 <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c7c:	f000 fa92 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c8e:	f001 ff17 	bl	8002ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 fa84 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000114 	.word	0x20000114

08000ca8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MX_USART2_UART_Init+0x50>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	f001 ff5e 	bl	8002ba0 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cea:	f000 fa5b 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000015c 	.word	0x2000015c
 8000cf8:	40004400 	.word	0x40004400

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a3f      	ldr	r2, [pc, #252]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d28:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a39      	ldr	r2, [pc, #228]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d2e:	f043 0320 	orr.w	r3, r3, #32
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0320 	and.w	r3, r3, #32
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a33      	ldr	r2, [pc, #204]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a2d      	ldr	r2, [pc, #180]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <MX_GPIO_Init+0x118>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HEAT_PUMP_Pin|HEATER_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2103      	movs	r1, #3
 8000d74:	4828      	ldr	r0, [pc, #160]	; (8000e18 <MX_GPIO_Init+0x11c>)
 8000d76:	f000 feb6 	bl	8001ae6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FAN_1_Pin|GPIO_PIN_1|FAN_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2133      	movs	r1, #51	; 0x33
 8000d7e:	4827      	ldr	r0, [pc, #156]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000d80:	f000 feb1 	bl	8001ae6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_3_GPIO_Port, FAN_3_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2101      	movs	r1, #1
 8000d88:	4825      	ldr	r0, [pc, #148]	; (8000e20 <MX_GPIO_Init+0x124>)
 8000d8a:	f000 feac 	bl	8001ae6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <MX_GPIO_Init+0x128>)
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	481d      	ldr	r0, [pc, #116]	; (8000e18 <MX_GPIO_Init+0x11c>)
 8000da4:	f000 fd2e 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : HEAT_PUMP_Pin HEATER_Pin */
  GPIO_InitStruct.Pin = HEAT_PUMP_Pin|HEATER_Pin;
 8000da8:	2303      	movs	r3, #3
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4816      	ldr	r0, [pc, #88]	; (8000e18 <MX_GPIO_Init+0x11c>)
 8000dc0:	f000 fd20 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_1_Pin PA1 FAN_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = FAN_1_Pin|GPIO_PIN_1|FAN_2_Pin|LD2_Pin;
 8000dc4:	2333      	movs	r3, #51	; 0x33
 8000dc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4810      	ldr	r0, [pc, #64]	; (8000e1c <MX_GPIO_Init+0x120>)
 8000ddc:	f000 fd12 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_3_Pin */
  GPIO_InitStruct.Pin = FAN_3_Pin;
 8000de0:	2301      	movs	r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAN_3_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <MX_GPIO_Init+0x124>)
 8000df8:	f000 fd04 	bl	8001804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2028      	movs	r0, #40	; 0x28
 8000e02:	f000 fc52 	bl	80016aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e06:	2028      	movs	r0, #40	; 0x28
 8000e08:	f000 fc6b 	bl	80016e2 <HAL_NVIC_EnableIRQ>

}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	40010c00 	.word	0x40010c00
 8000e24:	10110000 	.word	0x10110000

08000e28 <fan_1>:

/* USER CODE BEGIN 4 */


void fan_1(void){
 8000e28:	b598      	push	{r3, r4, r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	if(DHT11_Data.Humidity > MAX_HUM){
 8000e2c:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <fan_1+0x134>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	494b      	ldr	r1, [pc, #300]	; (8000f60 <fan_1+0x138>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fc54 	bl	80006e0 <__aeabi_fcmpgt>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d037      	beq.n	8000eae <fan_1+0x86>
		fan_1_speed = speed_fan *(DHT11_Data.Humidity- MAX_HUM + 20)/40;
 8000e3e:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <fan_1+0x13c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fa3c 	bl	80002c0 <__aeabi_i2f>
 8000e48:	4604      	mov	r4, r0
 8000e4a:	4b44      	ldr	r3, [pc, #272]	; (8000f5c <fan_1+0x134>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4944      	ldr	r1, [pc, #272]	; (8000f60 <fan_1+0x138>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff f97f 	bl	8000154 <__aeabi_fsub>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4943      	ldr	r1, [pc, #268]	; (8000f68 <fan_1+0x140>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f97c 	bl	8000158 <__addsf3>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4619      	mov	r1, r3
 8000e64:	4620      	mov	r0, r4
 8000e66:	f7ff fa7f 	bl	8000368 <__aeabi_fmul>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	493f      	ldr	r1, [pc, #252]	; (8000f6c <fan_1+0x144>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fb2e 	bl	80004d0 <__aeabi_fdiv>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc3c 	bl	80006f4 <__aeabi_f2iz>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <fan_1+0x148>)
 8000e80:	601a      	str	r2, [r3, #0]
		count1++;
 8000e82:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <fan_1+0x14c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a3a      	ldr	r2, [pc, #232]	; (8000f74 <fan_1+0x14c>)
 8000e8a:	6013      	str	r3, [r2, #0]
		if(count1 > fan_period/fan_1_speed){
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <fan_1+0x150>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <fan_1+0x148>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e98:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <fan_1+0x14c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	da06      	bge.n	8000eae <fan_1+0x86>
			count1 = 0;
 8000ea0:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <fan_1+0x14c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4834      	ldr	r0, [pc, #208]	; (8000f7c <fan_1+0x154>)
 8000eaa:	f000 fe34 	bl	8001b16 <HAL_GPIO_TogglePin>
		}

	}
	if(DHT11_Data.Humidity > LOW_HUM && DHT11_Data.Humidity < MAX_HUM){
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <fan_1+0x134>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	4933      	ldr	r1, [pc, #204]	; (8000f80 <fan_1+0x158>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fc13 	bl	80006e0 <__aeabi_fcmpgt>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03b      	beq.n	8000f38 <fan_1+0x110>
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <fan_1+0x134>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4926      	ldr	r1, [pc, #152]	; (8000f60 <fan_1+0x138>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fbec 	bl	80006a4 <__aeabi_fcmplt>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d032      	beq.n	8000f38 <fan_1+0x110>
		/*
		buf_len = sprintf(buf, "\033[2J]	");
		buf_len = sprintf(buf, "test low\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
		*/
		fan_1_speed_2 = speed_fan *(DHT11_Data.Humidity- LOW_HUM)/40;
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <fan_1+0x13c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff f9f2 	bl	80002c0 <__aeabi_i2f>
 8000edc:	4604      	mov	r4, r0
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <fan_1+0x134>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	4927      	ldr	r1, [pc, #156]	; (8000f80 <fan_1+0x158>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff f935 	bl	8000154 <__aeabi_fsub>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4619      	mov	r1, r3
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fa3a 	bl	8000368 <__aeabi_fmul>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	491d      	ldr	r1, [pc, #116]	; (8000f6c <fan_1+0x144>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fae9 	bl	80004d0 <__aeabi_fdiv>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fbf7 	bl	80006f4 <__aeabi_f2iz>
 8000f06:	4602      	mov	r2, r0
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <fan_1+0x15c>)
 8000f0a:	601a      	str	r2, [r3, #0]
		count2++;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <fan_1+0x160>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <fan_1+0x160>)
 8000f14:	6013      	str	r3, [r2, #0]
		if(count2 > fan_period/fan_1_speed_2){
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <fan_1+0x150>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <fan_1+0x15c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <fan_1+0x160>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	da06      	bge.n	8000f38 <fan_1+0x110>
			count2 = 0;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <fan_1+0x160>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000f30:	2101      	movs	r1, #1
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <fan_1+0x154>)
 8000f34:	f000 fdef 	bl	8001b16 <HAL_GPIO_TogglePin>
		}
	}
	if(DHT11_Data.Humidity < LOW_HUM){
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <fan_1+0x134>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	4910      	ldr	r1, [pc, #64]	; (8000f80 <fan_1+0x158>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbb0 	bl	80006a4 <__aeabi_fcmplt>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d100      	bne.n	8000f4c <fan_1+0x124>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8000f4a:	e004      	b.n	8000f56 <fan_1+0x12e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2101      	movs	r1, #1
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <fan_1+0x154>)
 8000f52:	f000 fdc8 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 8000f56:	bf00      	nop
 8000f58:	bd98      	pop	{r3, r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000d8 	.word	0x200000d8
 8000f60:	42b40000 	.word	0x42b40000
 8000f64:	20000004 	.word	0x20000004
 8000f68:	41a00000 	.word	0x41a00000
 8000f6c:	42200000 	.word	0x42200000
 8000f70:	200000ac 	.word	0x200000ac
 8000f74:	200000a4 	.word	0x200000a4
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	428c0000 	.word	0x428c0000
 8000f84:	200000b0 	.word	0x200000b0
 8000f88:	200000a8 	.word	0x200000a8

08000f8c <heater>:
void heater(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	if(sw_fan2){
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <heater+0x44>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <heater+0x18>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <heater+0x48>)
 8000f9e:	f000 fda2 	bl	8001ae6 <HAL_GPIO_WritePin>
 8000fa2:	e004      	b.n	8000fae <heater+0x22>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <heater+0x48>)
 8000faa:	f000 fd9c 	bl	8001ae6 <HAL_GPIO_WritePin>
	}

	if(sw_heater){
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <heater+0x4c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <heater+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4808      	ldr	r0, [pc, #32]	; (8000fdc <heater+0x50>)
 8000fbc:	f000 fd93 	bl	8001ae6 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
	}
}
 8000fc0:	e004      	b.n	8000fcc <heater+0x40>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <heater+0x50>)
 8000fc8:	f000 fd8d 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000099 	.word	0x20000099
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	2000009b 	.word	0x2000009b
 8000fdc:	40011000 	.word	0x40011000

08000fe0 <heat_pump>:
void heat_pump(void){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	if(sw_pump){
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <heat_pump+0x44>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <heat_pump+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2101      	movs	r1, #1
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <heat_pump+0x48>)
 8000ff2:	f000 fd78 	bl	8001ae6 <HAL_GPIO_WritePin>
 8000ff6:	e004      	b.n	8001002 <heat_pump+0x22>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <heat_pump+0x48>)
 8000ffe:	f000 fd72 	bl	8001ae6 <HAL_GPIO_WritePin>
	}

	if(sw_fan3){
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <heat_pump+0x4c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <heat_pump+0x36>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	2101      	movs	r1, #1
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <heat_pump+0x50>)
 8001010:	f000 fd69 	bl	8001ae6 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
	}

}
 8001014:	e004      	b.n	8001020 <heat_pump+0x40>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2101      	movs	r1, #1
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <heat_pump+0x50>)
 800101c:	f000 fd63 	bl	8001ae6 <HAL_GPIO_WritePin>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000009c 	.word	0x2000009c
 8001028:	40011000 	.word	0x40011000
 800102c:	2000009a 	.word	0x2000009a
 8001030:	40010c00 	.word	0x40010c00

08001034 <HAL_TIM_PeriodElapsedCallback>:
enum {HEAT_UP, HEAT_PUMP} eState;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *time) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	Tim_out();
 800103c:	f7ff fd5e 	bl	8000afc <Tim_out>
    DHT_GetData(&DHT11_Data, DHT_PORT, DHT_PIN);
 8001040:	2202      	movs	r2, #2
 8001042:	4948      	ldr	r1, [pc, #288]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001044:	4848      	ldr	r0, [pc, #288]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001046:	f7ff fcf1 	bl	8000a2c <DHT_GetData>
	Temperature = DHT11_Data.Temperature;
 800104a:	4b47      	ldr	r3, [pc, #284]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fb50 	bl	80006f4 <__aeabi_f2iz>
 8001054:	4602      	mov	r2, r0
 8001056:	4b45      	ldr	r3, [pc, #276]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001058:	601a      	str	r2, [r3, #0]
    Humidity = DHT11_Data.Humidity;
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fb48 	bl	80006f4 <__aeabi_f2iz>
 8001064:	4602      	mov	r2, r0
 8001066:	4b42      	ldr	r3, [pc, #264]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001068:	601a      	str	r2, [r3, #0]
  	//HAL_Delay(3000);

	buf_len = sprintf(buf, "\033[2J]	");
 800106a:	4b42      	ldr	r3, [pc, #264]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800106c:	4a42      	ldr	r2, [pc, #264]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800106e:	6810      	ldr	r0, [r2, #0]
 8001070:	6018      	str	r0, [r3, #0]
 8001072:	8891      	ldrh	r1, [r2, #4]
 8001074:	7992      	ldrb	r2, [r2, #6]
 8001076:	8099      	strh	r1, [r3, #4]
 8001078:	719a      	strb	r2, [r3, #6]
 800107a:	2206      	movs	r2, #6
 800107c:	4b3f      	ldr	r3, [pc, #252]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800107e:	601a      	str	r2, [r3, #0]
	buf_len = sprintf(buf, "%d percent : %d C     \r\n",Humidity,Temperature);
 8001080:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	493d      	ldr	r1, [pc, #244]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800108a:	483a      	ldr	r0, [pc, #232]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800108c:	f002 f9a6 	bl	80033dc <siprintf>
 8001090:	4602      	mov	r2, r0
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001094:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	b29a      	uxth	r2, r3
 800109c:	2364      	movs	r3, #100	; 0x64
 800109e:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80010a0:	4838      	ldr	r0, [pc, #224]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80010a2:	f001 fdca 	bl	8002c3a <HAL_UART_Transmit>

	fan_1();
 80010a6:	f7ff febf 	bl	8000e28 <fan_1>

	switch (eState){
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <HAL_TIM_PeriodElapsedCallback+0x84>
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d02f      	beq.n	8001116 <HAL_TIM_PeriodElapsedCallback+0xe2>
					eState = HEAT_UP;
				}

		break;
		}
}
 80010b6:	e051      	b.n	800115c <HAL_TIM_PeriodElapsedCallback+0x128>
			heat_pump();
 80010b8:	f7ff ff92 	bl	8000fe0 <heat_pump>
			heater();
 80010bc:	f7ff ff66 	bl	8000f8c <heater>
			sw_heater = 1;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
			sw_fan2 = 1;
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
			if(DHT11_Data.Temperature > MAX){
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4930      	ldr	r1, [pc, #192]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fb04 	bl	80006e0 <__aeabi_fcmpgt>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <HAL_TIM_PeriodElapsedCallback+0xb6>
				sw_heater = 0;
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
				sw_fan2 = 0;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
			count++;
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80010f2:	6013      	str	r3, [r2, #0]
			if(count > 30){
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b1e      	cmp	r3, #30
 80010fa:	dd2c      	ble.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x122>
				sw_heater = 0;
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
				sw_fan2 = 0;
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
				count = 0;
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
				eState = HEAT_PUMP;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
		break;
 8001114:	e01f      	b.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x122>
				heater();
 8001116:	f7ff ff39 	bl	8000f8c <heater>
				heat_pump();
 800111a:	f7ff ff61 	bl	8000fe0 <heat_pump>
				sw_pump = 1;
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
				sw_fan3 = 1;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
				count++;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001132:	6013      	str	r3, [r2, #0]
				if(count > 30){
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b1e      	cmp	r3, #30
 800113a:	dd0e      	ble.n	800115a <HAL_TIM_PeriodElapsedCallback+0x126>
					sw_fan3 = 0;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
					sw_pump = 0;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
					count = 0;
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
					eState = HEAT_UP;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
		break;
 8001154:	e001      	b.n	800115a <HAL_TIM_PeriodElapsedCallback+0x126>
		break;
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <HAL_TIM_PeriodElapsedCallback+0x128>
		break;
 800115a:	bf00      	nop
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40010800 	.word	0x40010800
 8001168:	200000d8 	.word	0x200000d8
 800116c:	200000d4 	.word	0x200000d4
 8001170:	200001bc 	.word	0x200001bc
 8001174:	200000e0 	.word	0x200000e0
 8001178:	08003c18 	.word	0x08003c18
 800117c:	20000000 	.word	0x20000000
 8001180:	08003c34 	.word	0x08003c34
 8001184:	2000015c 	.word	0x2000015c
 8001188:	200000d0 	.word	0x200000d0
 800118c:	2000009b 	.word	0x2000009b
 8001190:	20000099 	.word	0x20000099
 8001194:	420c0000 	.word	0x420c0000
 8001198:	200000a0 	.word	0x200000a0
 800119c:	2000009c 	.word	0x2000009c
 80011a0:	2000009a 	.word	0x2000009a

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_MspInit+0x5c>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_MspInit+0x5c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x5c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x5c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x5c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_MspInit+0x60>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_MspInit+0x60>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001224:	d113      	bne.n	800124e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	201c      	movs	r0, #28
 8001244:	f000 fa31 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001248:	201c      	movs	r0, #28
 800124a:	f000 fa4a 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_UART_MspInit+0x80>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d12b      	bne.n	80012d4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_UART_MspInit+0x84>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0x84>)
 8001282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001286:	61d3      	str	r3, [r2, #28]
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x84>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_UART_MspInit+0x84>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0x84>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_UART_MspInit+0x84>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ac:	230c      	movs	r3, #12
 80012ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4809      	ldr	r0, [pc, #36]	; (80012e4 <HAL_UART_MspInit+0x88>)
 80012c0:	f000 faa0 	bl	8001804 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2026      	movs	r0, #38	; 0x26
 80012ca:	f000 f9ee 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ce:	2026      	movs	r0, #38	; 0x26
 80012d0:	f000 fa07 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40004400 	.word	0x40004400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <HardFault_Handler+0x4>

080012fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <MemManage_Handler+0x4>

08001300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <BusFault_Handler+0x4>

08001306 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f8c6 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM2_IRQHandler+0x10>)
 8001342:	f001 f8e1 	bl	8002508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000114 	.word	0x20000114

08001350 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <USART2_IRQHandler+0x10>)
 8001356:	f001 fd03 	bl	8002d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000015c 	.word	0x2000015c

08001364 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001368:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800136c:	f000 fbec 	bl	8001b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f001 ffe8 	bl	8003378 <__errno>
 80013a8:	4602      	mov	r2, r0
 80013aa:	230c      	movs	r3, #12
 80013ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_sbrk+0x64>)
 80013c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20005000 	.word	0x20005000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	200000b4 	.word	0x200000b4
 80013dc:	200001c8 	.word	0x200001c8

080013e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013ee:	e003      	b.n	80013f8 <LoopCopyDataInit>

080013f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013f6:	3104      	adds	r1, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001400:	d3f6      	bcc.n	80013f0 <CopyDataInit>
  ldr r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001404:	e002      	b.n	800140c <LoopFillZerobss>

08001406 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001408:	f842 3b04 	str.w	r3, [r2], #4

0800140c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800140e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001410:	d3f9      	bcc.n	8001406 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001412:	f7ff ffe5 	bl	80013e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f001 ffb5 	bl	8003384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800141a:	f7ff fba5 	bl	8000b68 <main>
  bx lr
 800141e:	4770      	bx	lr
  ldr r3, =_sidata
 8001420:	08003cb8 	.word	0x08003cb8
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001428:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 800142c:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8001430:	200001c8 	.word	0x200001c8

08001434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_2_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x28>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x28>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f923 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff feac 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40022000 	.word	0x40022000

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f93b 	bl	80016fe <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 f903 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	20000014 	.word	0x20000014
 80014c0:	20000010 	.word	0x20000010

080014c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_IncTick+0x1c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_IncTick+0x20>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <HAL_IncTick+0x20>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000014 	.word	0x20000014
 80014e4:	200001c0 	.word	0x200001c0

080014e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <HAL_GetTick+0x10>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	200001c0 	.word	0x200001c0

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4906      	ldr	r1, [pc, #24]	; (8001594 <__NVIC_EnableIRQ+0x34>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff90 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff2d 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff42 	bl	8001544 <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff90 	bl	80015ec <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5f 	bl	8001598 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff35 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172a:	2b02      	cmp	r3, #2
 800172c:	d005      	beq.n	800173a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2204      	movs	r2, #4
 8001732:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e051      	b.n	80017de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 020e 	bic.w	r2, r2, #14
 8001748:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_DMA_Abort_IT+0xd0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d029      	beq.n	80017b8 <HAL_DMA_Abort_IT+0xa0>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a20      	ldr	r2, [pc, #128]	; (80017ec <HAL_DMA_Abort_IT+0xd4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d022      	beq.n	80017b4 <HAL_DMA_Abort_IT+0x9c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_DMA_Abort_IT+0xd8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d01a      	beq.n	80017ae <HAL_DMA_Abort_IT+0x96>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_DMA_Abort_IT+0xdc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d012      	beq.n	80017a8 <HAL_DMA_Abort_IT+0x90>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_DMA_Abort_IT+0xe0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00a      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x8a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_DMA_Abort_IT+0xe4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d102      	bne.n	800179c <HAL_DMA_Abort_IT+0x84>
 8001796:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800179a:	e00e      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 800179c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a0:	e00b      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a6:	e008      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	e005      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	e002      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017b4:	2310      	movs	r3, #16
 80017b6:	e000      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017b8:	2301      	movs	r3, #1
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_DMA_Abort_IT+0xe8>)
 80017bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
    } 
  }
  return status;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020008 	.word	0x40020008
 80017ec:	4002001c 	.word	0x4002001c
 80017f0:	40020030 	.word	0x40020030
 80017f4:	40020044 	.word	0x40020044
 80017f8:	40020058 	.word	0x40020058
 80017fc:	4002006c 	.word	0x4002006c
 8001800:	40020000 	.word	0x40020000

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001816:	e127      	b.n	8001a68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001818:	2201      	movs	r2, #1
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8116 	bne.w	8001a62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b12      	cmp	r3, #18
 800183c:	d034      	beq.n	80018a8 <HAL_GPIO_Init+0xa4>
 800183e:	2b12      	cmp	r3, #18
 8001840:	d80d      	bhi.n	800185e <HAL_GPIO_Init+0x5a>
 8001842:	2b02      	cmp	r3, #2
 8001844:	d02b      	beq.n	800189e <HAL_GPIO_Init+0x9a>
 8001846:	2b02      	cmp	r3, #2
 8001848:	d804      	bhi.n	8001854 <HAL_GPIO_Init+0x50>
 800184a:	2b00      	cmp	r3, #0
 800184c:	d031      	beq.n	80018b2 <HAL_GPIO_Init+0xae>
 800184e:	2b01      	cmp	r3, #1
 8001850:	d01c      	beq.n	800188c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001852:	e048      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001854:	2b03      	cmp	r3, #3
 8001856:	d043      	beq.n	80018e0 <HAL_GPIO_Init+0xdc>
 8001858:	2b11      	cmp	r3, #17
 800185a:	d01b      	beq.n	8001894 <HAL_GPIO_Init+0x90>
          break;
 800185c:	e043      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800185e:	4a89      	ldr	r2, [pc, #548]	; (8001a84 <HAL_GPIO_Init+0x280>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d026      	beq.n	80018b2 <HAL_GPIO_Init+0xae>
 8001864:	4a87      	ldr	r2, [pc, #540]	; (8001a84 <HAL_GPIO_Init+0x280>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d806      	bhi.n	8001878 <HAL_GPIO_Init+0x74>
 800186a:	4a87      	ldr	r2, [pc, #540]	; (8001a88 <HAL_GPIO_Init+0x284>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d020      	beq.n	80018b2 <HAL_GPIO_Init+0xae>
 8001870:	4a86      	ldr	r2, [pc, #536]	; (8001a8c <HAL_GPIO_Init+0x288>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01d      	beq.n	80018b2 <HAL_GPIO_Init+0xae>
          break;
 8001876:	e036      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001878:	4a85      	ldr	r2, [pc, #532]	; (8001a90 <HAL_GPIO_Init+0x28c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d019      	beq.n	80018b2 <HAL_GPIO_Init+0xae>
 800187e:	4a85      	ldr	r2, [pc, #532]	; (8001a94 <HAL_GPIO_Init+0x290>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d016      	beq.n	80018b2 <HAL_GPIO_Init+0xae>
 8001884:	4a84      	ldr	r2, [pc, #528]	; (8001a98 <HAL_GPIO_Init+0x294>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0xae>
          break;
 800188a:	e02c      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e028      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	3304      	adds	r3, #4
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e023      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	3308      	adds	r3, #8
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e01e      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	330c      	adds	r3, #12
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e019      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ba:	2304      	movs	r3, #4
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e012      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	611a      	str	r2, [r3, #16]
          break;
 80018d2:	e008      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	615a      	str	r2, [r3, #20]
          break;
 80018de:	e002      	b.n	80018e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2bff      	cmp	r3, #255	; 0xff
 80018ea:	d801      	bhi.n	80018f0 <HAL_GPIO_Init+0xec>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	e001      	b.n	80018f4 <HAL_GPIO_Init+0xf0>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2bff      	cmp	r3, #255	; 0xff
 80018fa:	d802      	bhi.n	8001902 <HAL_GPIO_Init+0xfe>
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x104>
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	3b08      	subs	r3, #8
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	210f      	movs	r1, #15
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	401a      	ands	r2, r3
 800191a:	6a39      	ldr	r1, [r7, #32]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 8096 	beq.w	8001a62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001936:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_GPIO_Init+0x298>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4a58      	ldr	r2, [pc, #352]	; (8001a9c <HAL_GPIO_Init+0x298>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6193      	str	r3, [r2, #24]
 8001942:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <HAL_GPIO_Init+0x298>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800194e:	4a54      	ldr	r2, [pc, #336]	; (8001aa0 <HAL_GPIO_Init+0x29c>)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4b      	ldr	r2, [pc, #300]	; (8001aa4 <HAL_GPIO_Init+0x2a0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d013      	beq.n	80019a2 <HAL_GPIO_Init+0x19e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4a      	ldr	r2, [pc, #296]	; (8001aa8 <HAL_GPIO_Init+0x2a4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00d      	beq.n	800199e <HAL_GPIO_Init+0x19a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a49      	ldr	r2, [pc, #292]	; (8001aac <HAL_GPIO_Init+0x2a8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d007      	beq.n	800199a <HAL_GPIO_Init+0x196>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a48      	ldr	r2, [pc, #288]	; (8001ab0 <HAL_GPIO_Init+0x2ac>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_GPIO_Init+0x192>
 8001992:	2303      	movs	r3, #3
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x1a0>
 8001996:	2304      	movs	r3, #4
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x1a0>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x1a0>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x1a0>
 80019a2:	2300      	movs	r3, #0
 80019a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a6:	f002 0203 	and.w	r2, r2, #3
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b4:	493a      	ldr	r1, [pc, #232]	; (8001aa0 <HAL_GPIO_Init+0x29c>)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4938      	ldr	r1, [pc, #224]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
 80019da:	e006      	b.n	80019ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019dc:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4933      	ldr	r1, [pc, #204]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f6:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	492e      	ldr	r1, [pc, #184]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a1e:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4924      	ldr	r1, [pc, #144]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	491f      	ldr	r1, [pc, #124]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	491a      	ldr	r1, [pc, #104]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60cb      	str	r3, [r1, #12]
 8001a52:	e006      	b.n	8001a62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4915      	ldr	r1, [pc, #84]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	3301      	adds	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f47f aed0 	bne.w	8001818 <HAL_GPIO_Init+0x14>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	372c      	adds	r7, #44	; 0x2c
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	10210000 	.word	0x10210000
 8001a88:	10110000 	.word	0x10110000
 8001a8c:	10120000 	.word	0x10120000
 8001a90:	10310000 	.word	0x10310000
 8001a94:	10320000 	.word	0x10320000
 8001a98:	10220000 	.word	0x10220000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40011400 	.word	0x40011400
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e001      	b.n	8001ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	807b      	strh	r3, [r7, #2]
 8001af2:	4613      	mov	r3, r2
 8001af4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af6:	787b      	ldrb	r3, [r7, #1]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afc:	887a      	ldrh	r2, [r7, #2]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b02:	e003      	b.n	8001b0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	611a      	str	r2, [r3, #16]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b28:	887a      	ldrh	r2, [r7, #2]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	041a      	lsls	r2, r3, #16
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	400b      	ands	r3, r1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f806 	bl	8001b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e26c      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8087 	beq.w	8001cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bac:	4b92      	ldr	r3, [pc, #584]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d00c      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bb8:	4b8f      	ldr	r3, [pc, #572]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d112      	bne.n	8001bea <HAL_RCC_OscConfig+0x5e>
 8001bc4:	4b8c      	ldr	r3, [pc, #560]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd0:	d10b      	bne.n	8001bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd2:	4b89      	ldr	r3, [pc, #548]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d06c      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x12c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d168      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e246      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x76>
 8001bf4:	4b80      	ldr	r3, [pc, #512]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a7f      	ldr	r2, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e02e      	b.n	8001c60 <HAL_RCC_OscConfig+0xd4>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x98>
 8001c0a:	4b7b      	ldr	r3, [pc, #492]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7a      	ldr	r2, [pc, #488]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b78      	ldr	r3, [pc, #480]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a77      	ldr	r2, [pc, #476]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e01d      	b.n	8001c60 <HAL_RCC_OscConfig+0xd4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0xbc>
 8001c2e:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a71      	ldr	r2, [pc, #452]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6e      	ldr	r2, [pc, #440]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCC_OscConfig+0xd4>
 8001c48:	4b6b      	ldr	r3, [pc, #428]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a6a      	ldr	r2, [pc, #424]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b68      	ldr	r3, [pc, #416]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a67      	ldr	r2, [pc, #412]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fc3e 	bl	80014e8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fc3a 	bl	80014e8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1fa      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0xe4>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fc2a 	bl	80014e8 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fc26 	bl	80014e8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1e6      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x10c>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d11c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x18c>
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d116      	bne.n	8001d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_RCC_OscConfig+0x176>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e1ba      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4939      	ldr	r1, [pc, #228]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	e03a      	b.n	8001d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d20:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff fbdf 	bl	80014e8 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fbdb 	bl	80014e8 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e19b      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4927      	ldr	r1, [pc, #156]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <HAL_RCC_OscConfig+0x270>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fbbe 	bl	80014e8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d70:	f7ff fbba 	bl	80014e8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e17a      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d03a      	beq.n	8001e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d019      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_RCC_OscConfig+0x274>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da8:	f7ff fb9e 	bl	80014e8 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fb9a 	bl	80014e8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e15a      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f000 fada 	bl	8002388 <RCC_Delay>
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fb84 	bl	80014e8 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de2:	e00f      	b.n	8001e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff fb80 	bl	80014e8 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d908      	bls.n	8001e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e140      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	42420000 	.word	0x42420000
 8001e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	4b9e      	ldr	r3, [pc, #632]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1e9      	bne.n	8001de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a6 	beq.w	8001f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b97      	ldr	r3, [pc, #604]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10d      	bne.n	8001e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b94      	ldr	r3, [pc, #592]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4a93      	ldr	r2, [pc, #588]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	61d3      	str	r3, [r2, #28]
 8001e3a:	4b91      	ldr	r3, [pc, #580]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4a:	4b8e      	ldr	r3, [pc, #568]	; (8002084 <HAL_RCC_OscConfig+0x4f8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d118      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e56:	4b8b      	ldr	r3, [pc, #556]	; (8002084 <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a8a      	ldr	r2, [pc, #552]	; (8002084 <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e62:	f7ff fb41 	bl	80014e8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6a:	f7ff fb3d 	bl	80014e8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b64      	cmp	r3, #100	; 0x64
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0fd      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	4b81      	ldr	r3, [pc, #516]	; (8002084 <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x312>
 8001e90:	4b7b      	ldr	r3, [pc, #492]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a7a      	ldr	r2, [pc, #488]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	e02d      	b.n	8001efa <HAL_RCC_OscConfig+0x36e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x334>
 8001ea6:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a75      	ldr	r2, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6213      	str	r3, [r2, #32]
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a72      	ldr	r2, [pc, #456]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	e01c      	b.n	8001efa <HAL_RCC_OscConfig+0x36e>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d10c      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x356>
 8001ec8:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4a6c      	ldr	r2, [pc, #432]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6213      	str	r3, [r2, #32]
 8001ed4:	4b6a      	ldr	r3, [pc, #424]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a69      	ldr	r2, [pc, #420]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	e00b      	b.n	8001efa <HAL_RCC_OscConfig+0x36e>
 8001ee2:	4b67      	ldr	r3, [pc, #412]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a66      	ldr	r2, [pc, #408]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	4b64      	ldr	r3, [pc, #400]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a63      	ldr	r2, [pc, #396]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f023 0304 	bic.w	r3, r3, #4
 8001ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d015      	beq.n	8001f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff faf1 	bl	80014e8 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7ff faed 	bl	80014e8 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0ab      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	4b57      	ldr	r3, [pc, #348]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ee      	beq.n	8001f0a <HAL_RCC_OscConfig+0x37e>
 8001f2c:	e014      	b.n	8001f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fadb 	bl	80014e8 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7ff fad7 	bl	80014e8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e095      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ee      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d105      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5e:	4b48      	ldr	r3, [pc, #288]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a47      	ldr	r2, [pc, #284]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8081 	beq.w	8002076 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f74:	4b42      	ldr	r3, [pc, #264]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d061      	beq.n	8002044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d146      	bne.n	8002016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f88:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_OscConfig+0x4fc>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff faab 	bl	80014e8 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff faa7 	bl	80014e8 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e067      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa8:	4b35      	ldr	r3, [pc, #212]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	d108      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	492d      	ldr	r1, [pc, #180]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a19      	ldr	r1, [r3, #32]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	4927      	ldr	r1, [pc, #156]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_OscConfig+0x4fc>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fa7b 	bl	80014e8 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7ff fa77 	bl	80014e8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e037      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x46a>
 8002014:	e02f      	b.n	8002076 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_RCC_OscConfig+0x4fc>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fa64 	bl	80014e8 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff fa60 	bl	80014e8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e020      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x498>
 8002042:	e018      	b.n	8002076 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e013      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	429a      	cmp	r2, r3
 8002062:	d106      	bne.n	8002072 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	40007000 	.word	0x40007000
 8002088:	42420060 	.word	0x42420060

0800208c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0d0      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d910      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b67      	ldr	r3, [pc, #412]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0207 	bic.w	r2, r3, #7
 80020b6:	4965      	ldr	r1, [pc, #404]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b63      	ldr	r3, [pc, #396]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0b8      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e8:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a52      	ldr	r2, [pc, #328]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800210a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	4b50      	ldr	r3, [pc, #320]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	494d      	ldr	r1, [pc, #308]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d040      	beq.n	80021ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d115      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e07f      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e073      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06b      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b39      	ldr	r3, [pc, #228]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4936      	ldr	r1, [pc, #216]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800217c:	f7ff f9b4 	bl	80014e8 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7ff f9b0 	bl	80014e8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e053      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d210      	bcs.n	80021dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	4922      	ldr	r1, [pc, #136]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e032      	b.n	8002242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4916      	ldr	r1, [pc, #88]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	490e      	ldr	r1, [pc, #56]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800221a:	f000 f821 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 800221e:	4601      	mov	r1, r0
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_RCC_ClockConfig+0x1c8>)
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	fa21 f303 	lsr.w	r3, r1, r3
 8002232:	4a09      	ldr	r2, [pc, #36]	; (8002258 <HAL_RCC_ClockConfig+0x1cc>)
 8002234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_RCC_ClockConfig+0x1d0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f912 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000
 8002250:	40021000 	.word	0x40021000
 8002254:	08003c64 	.word	0x08003c64
 8002258:	2000000c 	.word	0x2000000c
 800225c:	20000010 	.word	0x20000010

08002260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002260:	b490      	push	{r4, r7}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002268:	1d3c      	adds	r4, r7, #4
 800226a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800226c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b04      	cmp	r3, #4
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x40>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x46>
 800229e:	e02d      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a0:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a2:	623b      	str	r3, [r7, #32]
      break;
 80022a4:	e02d      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022b2:	4413      	add	r3, r2
 80022b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	0c5b      	lsrs	r3, r3, #17
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022d2:	4413      	add	r3, r2
 80022d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022de:	fb02 f203 	mul.w	r2, r2, r3
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	e004      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	623b      	str	r3, [r7, #32]
      break;
 80022fa:	e002      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022fe:	623b      	str	r3, [r7, #32]
      break;
 8002300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002302:	6a3b      	ldr	r3, [r7, #32]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bc90      	pop	{r4, r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	08003c50 	.word	0x08003c50
 8002314:	08003c60 	.word	0x08003c60
 8002318:	40021000 	.word	0x40021000
 800231c:	007a1200 	.word	0x007a1200
 8002320:	003d0900 	.word	0x003d0900

08002324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002328:	4b02      	ldr	r3, [pc, #8]	; (8002334 <HAL_RCC_GetHCLKFreq+0x10>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	2000000c 	.word	0x2000000c

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800233c:	f7ff fff2 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002340:	4601      	mov	r1, r0
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	08003c74 	.word	0x08003c74

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002364:	f7ff ffde 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002368:	4601      	mov	r1, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0adb      	lsrs	r3, r3, #11
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4a03      	ldr	r2, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	08003c74 	.word	0x08003c74

08002388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <RCC_Delay+0x34>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <RCC_Delay+0x38>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0a5b      	lsrs	r3, r3, #9
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a4:	bf00      	nop
  }
  while (Delay --);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e5a      	subs	r2, r3, #1
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f9      	bne.n	80023a4 <RCC_Delay+0x1c>
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e041      	b.n	800245a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe ff12 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f000 fa64 	bl	80028d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d001      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e03a      	b.n	80024f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a18      	ldr	r2, [pc, #96]	; (80024fc <HAL_TIM_Base_Start_IT+0x98>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00e      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x58>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d009      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x58>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <HAL_TIM_Base_Start_IT+0x9c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x58>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <HAL_TIM_Base_Start_IT+0xa0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d111      	bne.n	80024e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d010      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0201 	orr.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024de:	e007      	b.n	80024f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400
 8002504:	40000800 	.word	0x40000800

08002508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d122      	bne.n	8002564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	d11b      	bne.n	8002564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0202 	mvn.w	r2, #2
 8002534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f9a4 	bl	8002898 <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f997 	bl	8002886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f9a6 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b04      	cmp	r3, #4
 8002570:	d122      	bne.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b04      	cmp	r3, #4
 800257e:	d11b      	bne.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0204 	mvn.w	r2, #4
 8002588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f97a 	bl	8002898 <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f96d 	bl	8002886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f97c 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d122      	bne.n	800260c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d11b      	bne.n	800260c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0208 	mvn.w	r2, #8
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2204      	movs	r2, #4
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f950 	bl	8002898 <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f943 	bl	8002886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f952 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b10      	cmp	r3, #16
 8002618:	d122      	bne.n	8002660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d11b      	bne.n	8002660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0210 	mvn.w	r2, #16
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2208      	movs	r2, #8
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f926 	bl	8002898 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f919 	bl	8002886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f928 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0201 	mvn.w	r2, #1
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fcd4 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b80      	cmp	r3, #128	; 0x80
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa6b 	bl	8002b8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b40      	cmp	r3, #64	; 0x40
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8ec 	bl	80028bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0220 	mvn.w	r2, #32
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa36 	bl	8002b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x18>
 800272c:	2302      	movs	r3, #2
 800272e:	e0a6      	b.n	800287e <HAL_TIM_ConfigClockSource+0x166>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800274e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002756:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d067      	beq.n	8002838 <HAL_TIM_ConfigClockSource+0x120>
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d80b      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x6c>
 800276c:	2b10      	cmp	r3, #16
 800276e:	d073      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0x140>
 8002770:	2b10      	cmp	r3, #16
 8002772:	d802      	bhi.n	800277a <HAL_TIM_ConfigClockSource+0x62>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d06f      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002778:	e078      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800277a:	2b20      	cmp	r3, #32
 800277c:	d06c      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0x140>
 800277e:	2b30      	cmp	r3, #48	; 0x30
 8002780:	d06a      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002782:	e073      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002784:	2b70      	cmp	r3, #112	; 0x70
 8002786:	d00d      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0x8c>
 8002788:	2b70      	cmp	r3, #112	; 0x70
 800278a:	d804      	bhi.n	8002796 <HAL_TIM_ConfigClockSource+0x7e>
 800278c:	2b50      	cmp	r3, #80	; 0x50
 800278e:	d033      	beq.n	80027f8 <HAL_TIM_ConfigClockSource+0xe0>
 8002790:	2b60      	cmp	r3, #96	; 0x60
 8002792:	d041      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002794:	e06a      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279a:	d066      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x152>
 800279c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a0:	d017      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80027a2:	e063      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f000 f965 	bl	8002a82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]
      break;
 80027d0:	e04c      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6899      	ldr	r1, [r3, #8]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f000 f94e 	bl	8002a82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f4:	609a      	str	r2, [r3, #8]
      break;
 80027f6:	e039      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	461a      	mov	r2, r3
 8002806:	f000 f8c5 	bl	8002994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2150      	movs	r1, #80	; 0x50
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f91c 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 8002816:	e029      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	461a      	mov	r2, r3
 8002826:	f000 f8e3 	bl	80029f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2160      	movs	r1, #96	; 0x60
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f90c 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 8002836:	e019      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	461a      	mov	r2, r3
 8002846:	f000 f8a5 	bl	8002994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f8fc 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 8002856:	e009      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 f8f3 	bl	8002a4e <TIM_ITRx_SetConfig>
        break;
 8002868:	e000      	b.n	800286c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800286a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
	...

080028d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a29      	ldr	r2, [pc, #164]	; (8002988 <TIM_Base_SetConfig+0xb8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00b      	beq.n	8002900 <TIM_Base_SetConfig+0x30>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d007      	beq.n	8002900 <TIM_Base_SetConfig+0x30>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a26      	ldr	r2, [pc, #152]	; (800298c <TIM_Base_SetConfig+0xbc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <TIM_Base_SetConfig+0x30>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a25      	ldr	r2, [pc, #148]	; (8002990 <TIM_Base_SetConfig+0xc0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d108      	bne.n	8002912 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <TIM_Base_SetConfig+0xb8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00b      	beq.n	8002932 <TIM_Base_SetConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002920:	d007      	beq.n	8002932 <TIM_Base_SetConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a19      	ldr	r2, [pc, #100]	; (800298c <TIM_Base_SetConfig+0xbc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d003      	beq.n	8002932 <TIM_Base_SetConfig+0x62>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <TIM_Base_SetConfig+0xc0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d108      	bne.n	8002944 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <TIM_Base_SetConfig+0xb8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d103      	bne.n	8002978 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	615a      	str	r2, [r3, #20]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800

08002994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f023 0201 	bic.w	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f023 030a 	bic.w	r3, r3, #10
 80029d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	621a      	str	r2, [r3, #32]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f023 0210 	bic.w	r2, r3, #16
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	031b      	lsls	r3, r3, #12
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f043 0307 	orr.w	r3, r3, #7
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b087      	sub	sp, #28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	021a      	lsls	r2, r3, #8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	609a      	str	r2, [r3, #8]
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e046      	b.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00e      	beq.n	8002b3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d009      	beq.n	8002b3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d004      	beq.n	8002b3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a10      	ldr	r2, [pc, #64]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10c      	bne.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800

08002b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e03f      	b.n	8002c32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fb48 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fb39 	bl	800325c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b08a      	sub	sp, #40	; 0x28
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d17c      	bne.n	8002d54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_UART_Transmit+0x2c>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e075      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Transmit+0x3e>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e06e      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2221      	movs	r2, #33	; 0x21
 8002c8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c8e:	f7fe fc2b 	bl	80014e8 <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca8:	d108      	bne.n	8002cbc <HAL_UART_Transmit+0x82>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e003      	b.n	8002cc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ccc:	e02a      	b.n	8002d24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f95c 	bl	8002f96 <UART_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e036      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10b      	bne.n	8002d06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	3302      	adds	r3, #2
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	e007      	b.n	8002d16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	3301      	adds	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1cf      	bne.n	8002cce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2200      	movs	r2, #0
 8002d36:	2140      	movs	r1, #64	; 0x40
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f92c 	bl	8002f96 <UART_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e006      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_UART_IRQHandler+0x52>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f9d5 	bl	800315a <UART_Receive_IT>
      return;
 8002db0:	e0d1      	b.n	8002f56 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80b0 	beq.w	8002f1a <HAL_UART_IRQHandler+0x1ba>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x70>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a5 	beq.w	8002f1a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_UART_IRQHandler+0x90>
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_UART_IRQHandler+0xb0>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e08:	f043 0202 	orr.w	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_UART_IRQHandler+0xd0>
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	f043 0204 	orr.w	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00f      	beq.n	8002e5a <HAL_UART_IRQHandler+0xfa>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d104      	bne.n	8002e4e <HAL_UART_IRQHandler+0xee>
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	f043 0208 	orr.w	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d078      	beq.n	8002f54 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_UART_IRQHandler+0x11c>
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f96f 	bl	800315a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x144>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d031      	beq.n	8002f08 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f8c0 	bl	800302a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d023      	beq.n	8002f00 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d013      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_UART_IRQHandler+0x1fc>)
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fc1b 	bl	8001718 <HAL_DMA_Abort_IT>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d016      	beq.n	8002f16 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef6:	e00e      	b.n	8002f16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f843 	bl	8002f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efe:	e00a      	b.n	8002f16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f83f 	bl	8002f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f06:	e006      	b.n	8002f16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f83b 	bl	8002f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f14:	e01e      	b.n	8002f54 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f16:	bf00      	nop
    return;
 8002f18:	e01c      	b.n	8002f54 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1d6>
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8ac 	bl	800308c <UART_Transmit_IT>
    return;
 8002f34:	e00f      	b.n	8002f56 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_UART_IRQHandler+0x1f6>
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8ed 	bl	800312a <UART_EndTransmit_IT>
    return;
 8002f50:	bf00      	nop
 8002f52:	e000      	b.n	8002f56 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002f54:	bf00      	nop
  }
}
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	08003065 	.word	0x08003065

08002f60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa6:	e02c      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d028      	beq.n	8003002 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb6:	f7fe fa97 	bl	80014e8 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d21d      	bcs.n	8003002 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fd4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e00f      	b.n	8003022 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	429a      	cmp	r2, r3
 800301e:	d0c3      	beq.n	8002fa8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003040:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff ff80 	bl	8002f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b21      	cmp	r3, #33	; 0x21
 800309e:	d13e      	bne.n	800311e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a8:	d114      	bne.n	80030d4 <UART_Transmit_IT+0x48>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d110      	bne.n	80030d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	621a      	str	r2, [r3, #32]
 80030d2:	e008      	b.n	80030e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	1c59      	adds	r1, r3, #1
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6211      	str	r1, [r2, #32]
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4619      	mov	r1, r3
 80030f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003108:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003118:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff08 	bl	8002f60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b22      	cmp	r3, #34	; 0x22
 800316c:	d170      	bne.n	8003250 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003176:	d117      	bne.n	80031a8 <UART_Receive_IT+0x4e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d113      	bne.n	80031a8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003196:	b29a      	uxth	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	1c9a      	adds	r2, r3, #2
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
 80031a6:	e026      	b.n	80031f6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ba:	d007      	beq.n	80031cc <UART_Receive_IT+0x72>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <UART_Receive_IT+0x80>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e008      	b.n	80031ec <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4619      	mov	r1, r3
 8003204:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003206:	2b00      	cmp	r3, #0
 8003208:	d120      	bne.n	800324c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0220 	bic.w	r2, r2, #32
 8003218:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003228:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fe95 	bl	8002f72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e002      	b.n	8003252 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003296:	f023 030c 	bic.w	r3, r3, #12
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <UART_SetConfig+0x114>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d103      	bne.n	80032cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032c4:	f7ff f84c 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	e002      	b.n	80032d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032cc:	f7ff f834 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 80032d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	009a      	lsls	r2, r3, #2
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	4a22      	ldr	r2, [pc, #136]	; (8003374 <UART_SetConfig+0x118>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	0119      	lsls	r1, r3, #4
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	009a      	lsls	r2, r3, #2
 80032fc:	441a      	add	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fbb2 f2f3 	udiv	r2, r2, r3
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <UART_SetConfig+0x118>)
 800330a:	fba3 0302 	umull	r0, r3, r3, r2
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2064      	movs	r0, #100	; 0x64
 8003312:	fb00 f303 	mul.w	r3, r0, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	3332      	adds	r3, #50	; 0x32
 800331c:	4a15      	ldr	r2, [pc, #84]	; (8003374 <UART_SetConfig+0x118>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003328:	4419      	add	r1, r3
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009a      	lsls	r2, r3, #2
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <UART_SetConfig+0x118>)
 8003342:	fba3 0302 	umull	r0, r3, r3, r2
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2064      	movs	r0, #100	; 0x64
 800334a:	fb00 f303 	mul.w	r3, r0, r3
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	3332      	adds	r3, #50	; 0x32
 8003354:	4a07      	ldr	r2, [pc, #28]	; (8003374 <UART_SetConfig+0x118>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	f003 020f 	and.w	r2, r3, #15
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	440a      	add	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40013800 	.word	0x40013800
 8003374:	51eb851f 	.word	0x51eb851f

08003378 <__errno>:
 8003378:	4b01      	ldr	r3, [pc, #4]	; (8003380 <__errno+0x8>)
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000018 	.word	0x20000018

08003384 <__libc_init_array>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	2500      	movs	r5, #0
 8003388:	4e0c      	ldr	r6, [pc, #48]	; (80033bc <__libc_init_array+0x38>)
 800338a:	4c0d      	ldr	r4, [pc, #52]	; (80033c0 <__libc_init_array+0x3c>)
 800338c:	1ba4      	subs	r4, r4, r6
 800338e:	10a4      	asrs	r4, r4, #2
 8003390:	42a5      	cmp	r5, r4
 8003392:	d109      	bne.n	80033a8 <__libc_init_array+0x24>
 8003394:	f000 fc34 	bl	8003c00 <_init>
 8003398:	2500      	movs	r5, #0
 800339a:	4e0a      	ldr	r6, [pc, #40]	; (80033c4 <__libc_init_array+0x40>)
 800339c:	4c0a      	ldr	r4, [pc, #40]	; (80033c8 <__libc_init_array+0x44>)
 800339e:	1ba4      	subs	r4, r4, r6
 80033a0:	10a4      	asrs	r4, r4, #2
 80033a2:	42a5      	cmp	r5, r4
 80033a4:	d105      	bne.n	80033b2 <__libc_init_array+0x2e>
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
 80033a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ac:	4798      	blx	r3
 80033ae:	3501      	adds	r5, #1
 80033b0:	e7ee      	b.n	8003390 <__libc_init_array+0xc>
 80033b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033b6:	4798      	blx	r3
 80033b8:	3501      	adds	r5, #1
 80033ba:	e7f2      	b.n	80033a2 <__libc_init_array+0x1e>
 80033bc:	08003cb0 	.word	0x08003cb0
 80033c0:	08003cb0 	.word	0x08003cb0
 80033c4:	08003cb0 	.word	0x08003cb0
 80033c8:	08003cb4 	.word	0x08003cb4

080033cc <memset>:
 80033cc:	4603      	mov	r3, r0
 80033ce:	4402      	add	r2, r0
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d100      	bne.n	80033d6 <memset+0xa>
 80033d4:	4770      	bx	lr
 80033d6:	f803 1b01 	strb.w	r1, [r3], #1
 80033da:	e7f9      	b.n	80033d0 <memset+0x4>

080033dc <siprintf>:
 80033dc:	b40e      	push	{r1, r2, r3}
 80033de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033e2:	b500      	push	{lr}
 80033e4:	b09c      	sub	sp, #112	; 0x70
 80033e6:	ab1d      	add	r3, sp, #116	; 0x74
 80033e8:	9002      	str	r0, [sp, #8]
 80033ea:	9006      	str	r0, [sp, #24]
 80033ec:	9107      	str	r1, [sp, #28]
 80033ee:	9104      	str	r1, [sp, #16]
 80033f0:	4808      	ldr	r0, [pc, #32]	; (8003414 <siprintf+0x38>)
 80033f2:	4909      	ldr	r1, [pc, #36]	; (8003418 <siprintf+0x3c>)
 80033f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033f8:	9105      	str	r1, [sp, #20]
 80033fa:	6800      	ldr	r0, [r0, #0]
 80033fc:	a902      	add	r1, sp, #8
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	f000 f866 	bl	80034d0 <_svfiprintf_r>
 8003404:	2200      	movs	r2, #0
 8003406:	9b02      	ldr	r3, [sp, #8]
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	b01c      	add	sp, #112	; 0x70
 800340c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003410:	b003      	add	sp, #12
 8003412:	4770      	bx	lr
 8003414:	20000018 	.word	0x20000018
 8003418:	ffff0208 	.word	0xffff0208

0800341c <__ssputs_r>:
 800341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003420:	688e      	ldr	r6, [r1, #8]
 8003422:	4682      	mov	sl, r0
 8003424:	429e      	cmp	r6, r3
 8003426:	460c      	mov	r4, r1
 8003428:	4690      	mov	r8, r2
 800342a:	4699      	mov	r9, r3
 800342c:	d837      	bhi.n	800349e <__ssputs_r+0x82>
 800342e:	898a      	ldrh	r2, [r1, #12]
 8003430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003434:	d031      	beq.n	800349a <__ssputs_r+0x7e>
 8003436:	2302      	movs	r3, #2
 8003438:	6825      	ldr	r5, [r4, #0]
 800343a:	6909      	ldr	r1, [r1, #16]
 800343c:	1a6f      	subs	r7, r5, r1
 800343e:	6965      	ldr	r5, [r4, #20]
 8003440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003444:	fb95 f5f3 	sdiv	r5, r5, r3
 8003448:	f109 0301 	add.w	r3, r9, #1
 800344c:	443b      	add	r3, r7
 800344e:	429d      	cmp	r5, r3
 8003450:	bf38      	it	cc
 8003452:	461d      	movcc	r5, r3
 8003454:	0553      	lsls	r3, r2, #21
 8003456:	d530      	bpl.n	80034ba <__ssputs_r+0x9e>
 8003458:	4629      	mov	r1, r5
 800345a:	f000 fb37 	bl	8003acc <_malloc_r>
 800345e:	4606      	mov	r6, r0
 8003460:	b950      	cbnz	r0, 8003478 <__ssputs_r+0x5c>
 8003462:	230c      	movs	r3, #12
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f8ca 3000 	str.w	r3, [sl]
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003472:	81a3      	strh	r3, [r4, #12]
 8003474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003478:	463a      	mov	r2, r7
 800347a:	6921      	ldr	r1, [r4, #16]
 800347c:	f000 fab6 	bl	80039ec <memcpy>
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348a:	81a3      	strh	r3, [r4, #12]
 800348c:	6126      	str	r6, [r4, #16]
 800348e:	443e      	add	r6, r7
 8003490:	6026      	str	r6, [r4, #0]
 8003492:	464e      	mov	r6, r9
 8003494:	6165      	str	r5, [r4, #20]
 8003496:	1bed      	subs	r5, r5, r7
 8003498:	60a5      	str	r5, [r4, #8]
 800349a:	454e      	cmp	r6, r9
 800349c:	d900      	bls.n	80034a0 <__ssputs_r+0x84>
 800349e:	464e      	mov	r6, r9
 80034a0:	4632      	mov	r2, r6
 80034a2:	4641      	mov	r1, r8
 80034a4:	6820      	ldr	r0, [r4, #0]
 80034a6:	f000 faac 	bl	8003a02 <memmove>
 80034aa:	68a3      	ldr	r3, [r4, #8]
 80034ac:	2000      	movs	r0, #0
 80034ae:	1b9b      	subs	r3, r3, r6
 80034b0:	60a3      	str	r3, [r4, #8]
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	441e      	add	r6, r3
 80034b6:	6026      	str	r6, [r4, #0]
 80034b8:	e7dc      	b.n	8003474 <__ssputs_r+0x58>
 80034ba:	462a      	mov	r2, r5
 80034bc:	f000 fb60 	bl	8003b80 <_realloc_r>
 80034c0:	4606      	mov	r6, r0
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d1e2      	bne.n	800348c <__ssputs_r+0x70>
 80034c6:	6921      	ldr	r1, [r4, #16]
 80034c8:	4650      	mov	r0, sl
 80034ca:	f000 fab3 	bl	8003a34 <_free_r>
 80034ce:	e7c8      	b.n	8003462 <__ssputs_r+0x46>

080034d0 <_svfiprintf_r>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	461d      	mov	r5, r3
 80034d6:	898b      	ldrh	r3, [r1, #12]
 80034d8:	b09d      	sub	sp, #116	; 0x74
 80034da:	061f      	lsls	r7, r3, #24
 80034dc:	4680      	mov	r8, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	4616      	mov	r6, r2
 80034e2:	d50f      	bpl.n	8003504 <_svfiprintf_r+0x34>
 80034e4:	690b      	ldr	r3, [r1, #16]
 80034e6:	b96b      	cbnz	r3, 8003504 <_svfiprintf_r+0x34>
 80034e8:	2140      	movs	r1, #64	; 0x40
 80034ea:	f000 faef 	bl	8003acc <_malloc_r>
 80034ee:	6020      	str	r0, [r4, #0]
 80034f0:	6120      	str	r0, [r4, #16]
 80034f2:	b928      	cbnz	r0, 8003500 <_svfiprintf_r+0x30>
 80034f4:	230c      	movs	r3, #12
 80034f6:	f8c8 3000 	str.w	r3, [r8]
 80034fa:	f04f 30ff 	mov.w	r0, #4294967295
 80034fe:	e0c8      	b.n	8003692 <_svfiprintf_r+0x1c2>
 8003500:	2340      	movs	r3, #64	; 0x40
 8003502:	6163      	str	r3, [r4, #20]
 8003504:	2300      	movs	r3, #0
 8003506:	9309      	str	r3, [sp, #36]	; 0x24
 8003508:	2320      	movs	r3, #32
 800350a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800350e:	2330      	movs	r3, #48	; 0x30
 8003510:	f04f 0b01 	mov.w	fp, #1
 8003514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003518:	9503      	str	r5, [sp, #12]
 800351a:	4637      	mov	r7, r6
 800351c:	463d      	mov	r5, r7
 800351e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003522:	b10b      	cbz	r3, 8003528 <_svfiprintf_r+0x58>
 8003524:	2b25      	cmp	r3, #37	; 0x25
 8003526:	d13e      	bne.n	80035a6 <_svfiprintf_r+0xd6>
 8003528:	ebb7 0a06 	subs.w	sl, r7, r6
 800352c:	d00b      	beq.n	8003546 <_svfiprintf_r+0x76>
 800352e:	4653      	mov	r3, sl
 8003530:	4632      	mov	r2, r6
 8003532:	4621      	mov	r1, r4
 8003534:	4640      	mov	r0, r8
 8003536:	f7ff ff71 	bl	800341c <__ssputs_r>
 800353a:	3001      	adds	r0, #1
 800353c:	f000 80a4 	beq.w	8003688 <_svfiprintf_r+0x1b8>
 8003540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003542:	4453      	add	r3, sl
 8003544:	9309      	str	r3, [sp, #36]	; 0x24
 8003546:	783b      	ldrb	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 809d 	beq.w	8003688 <_svfiprintf_r+0x1b8>
 800354e:	2300      	movs	r3, #0
 8003550:	f04f 32ff 	mov.w	r2, #4294967295
 8003554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	9307      	str	r3, [sp, #28]
 800355c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003560:	931a      	str	r3, [sp, #104]	; 0x68
 8003562:	462f      	mov	r7, r5
 8003564:	2205      	movs	r2, #5
 8003566:	f817 1b01 	ldrb.w	r1, [r7], #1
 800356a:	4850      	ldr	r0, [pc, #320]	; (80036ac <_svfiprintf_r+0x1dc>)
 800356c:	f000 fa30 	bl	80039d0 <memchr>
 8003570:	9b04      	ldr	r3, [sp, #16]
 8003572:	b9d0      	cbnz	r0, 80035aa <_svfiprintf_r+0xda>
 8003574:	06d9      	lsls	r1, r3, #27
 8003576:	bf44      	itt	mi
 8003578:	2220      	movmi	r2, #32
 800357a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800357e:	071a      	lsls	r2, r3, #28
 8003580:	bf44      	itt	mi
 8003582:	222b      	movmi	r2, #43	; 0x2b
 8003584:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003588:	782a      	ldrb	r2, [r5, #0]
 800358a:	2a2a      	cmp	r2, #42	; 0x2a
 800358c:	d015      	beq.n	80035ba <_svfiprintf_r+0xea>
 800358e:	462f      	mov	r7, r5
 8003590:	2000      	movs	r0, #0
 8003592:	250a      	movs	r5, #10
 8003594:	9a07      	ldr	r2, [sp, #28]
 8003596:	4639      	mov	r1, r7
 8003598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800359c:	3b30      	subs	r3, #48	; 0x30
 800359e:	2b09      	cmp	r3, #9
 80035a0:	d94d      	bls.n	800363e <_svfiprintf_r+0x16e>
 80035a2:	b1b8      	cbz	r0, 80035d4 <_svfiprintf_r+0x104>
 80035a4:	e00f      	b.n	80035c6 <_svfiprintf_r+0xf6>
 80035a6:	462f      	mov	r7, r5
 80035a8:	e7b8      	b.n	800351c <_svfiprintf_r+0x4c>
 80035aa:	4a40      	ldr	r2, [pc, #256]	; (80036ac <_svfiprintf_r+0x1dc>)
 80035ac:	463d      	mov	r5, r7
 80035ae:	1a80      	subs	r0, r0, r2
 80035b0:	fa0b f000 	lsl.w	r0, fp, r0
 80035b4:	4318      	orrs	r0, r3
 80035b6:	9004      	str	r0, [sp, #16]
 80035b8:	e7d3      	b.n	8003562 <_svfiprintf_r+0x92>
 80035ba:	9a03      	ldr	r2, [sp, #12]
 80035bc:	1d11      	adds	r1, r2, #4
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	9103      	str	r1, [sp, #12]
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	db01      	blt.n	80035ca <_svfiprintf_r+0xfa>
 80035c6:	9207      	str	r2, [sp, #28]
 80035c8:	e004      	b.n	80035d4 <_svfiprintf_r+0x104>
 80035ca:	4252      	negs	r2, r2
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	9207      	str	r2, [sp, #28]
 80035d2:	9304      	str	r3, [sp, #16]
 80035d4:	783b      	ldrb	r3, [r7, #0]
 80035d6:	2b2e      	cmp	r3, #46	; 0x2e
 80035d8:	d10c      	bne.n	80035f4 <_svfiprintf_r+0x124>
 80035da:	787b      	ldrb	r3, [r7, #1]
 80035dc:	2b2a      	cmp	r3, #42	; 0x2a
 80035de:	d133      	bne.n	8003648 <_svfiprintf_r+0x178>
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	3702      	adds	r7, #2
 80035e4:	1d1a      	adds	r2, r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	9203      	str	r2, [sp, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bfb8      	it	lt
 80035ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80035f2:	9305      	str	r3, [sp, #20]
 80035f4:	4d2e      	ldr	r5, [pc, #184]	; (80036b0 <_svfiprintf_r+0x1e0>)
 80035f6:	2203      	movs	r2, #3
 80035f8:	7839      	ldrb	r1, [r7, #0]
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 f9e8 	bl	80039d0 <memchr>
 8003600:	b138      	cbz	r0, 8003612 <_svfiprintf_r+0x142>
 8003602:	2340      	movs	r3, #64	; 0x40
 8003604:	1b40      	subs	r0, r0, r5
 8003606:	fa03 f000 	lsl.w	r0, r3, r0
 800360a:	9b04      	ldr	r3, [sp, #16]
 800360c:	3701      	adds	r7, #1
 800360e:	4303      	orrs	r3, r0
 8003610:	9304      	str	r3, [sp, #16]
 8003612:	7839      	ldrb	r1, [r7, #0]
 8003614:	2206      	movs	r2, #6
 8003616:	4827      	ldr	r0, [pc, #156]	; (80036b4 <_svfiprintf_r+0x1e4>)
 8003618:	1c7e      	adds	r6, r7, #1
 800361a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800361e:	f000 f9d7 	bl	80039d0 <memchr>
 8003622:	2800      	cmp	r0, #0
 8003624:	d038      	beq.n	8003698 <_svfiprintf_r+0x1c8>
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <_svfiprintf_r+0x1e8>)
 8003628:	bb13      	cbnz	r3, 8003670 <_svfiprintf_r+0x1a0>
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	3307      	adds	r3, #7
 800362e:	f023 0307 	bic.w	r3, r3, #7
 8003632:	3308      	adds	r3, #8
 8003634:	9303      	str	r3, [sp, #12]
 8003636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003638:	444b      	add	r3, r9
 800363a:	9309      	str	r3, [sp, #36]	; 0x24
 800363c:	e76d      	b.n	800351a <_svfiprintf_r+0x4a>
 800363e:	fb05 3202 	mla	r2, r5, r2, r3
 8003642:	2001      	movs	r0, #1
 8003644:	460f      	mov	r7, r1
 8003646:	e7a6      	b.n	8003596 <_svfiprintf_r+0xc6>
 8003648:	2300      	movs	r3, #0
 800364a:	250a      	movs	r5, #10
 800364c:	4619      	mov	r1, r3
 800364e:	3701      	adds	r7, #1
 8003650:	9305      	str	r3, [sp, #20]
 8003652:	4638      	mov	r0, r7
 8003654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003658:	3a30      	subs	r2, #48	; 0x30
 800365a:	2a09      	cmp	r2, #9
 800365c:	d903      	bls.n	8003666 <_svfiprintf_r+0x196>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0c8      	beq.n	80035f4 <_svfiprintf_r+0x124>
 8003662:	9105      	str	r1, [sp, #20]
 8003664:	e7c6      	b.n	80035f4 <_svfiprintf_r+0x124>
 8003666:	fb05 2101 	mla	r1, r5, r1, r2
 800366a:	2301      	movs	r3, #1
 800366c:	4607      	mov	r7, r0
 800366e:	e7f0      	b.n	8003652 <_svfiprintf_r+0x182>
 8003670:	ab03      	add	r3, sp, #12
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4622      	mov	r2, r4
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <_svfiprintf_r+0x1ec>)
 8003678:	a904      	add	r1, sp, #16
 800367a:	4640      	mov	r0, r8
 800367c:	f3af 8000 	nop.w
 8003680:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003684:	4681      	mov	r9, r0
 8003686:	d1d6      	bne.n	8003636 <_svfiprintf_r+0x166>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	065b      	lsls	r3, r3, #25
 800368c:	f53f af35 	bmi.w	80034fa <_svfiprintf_r+0x2a>
 8003690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003692:	b01d      	add	sp, #116	; 0x74
 8003694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003698:	ab03      	add	r3, sp, #12
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4622      	mov	r2, r4
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <_svfiprintf_r+0x1ec>)
 80036a0:	a904      	add	r1, sp, #16
 80036a2:	4640      	mov	r0, r8
 80036a4:	f000 f882 	bl	80037ac <_printf_i>
 80036a8:	e7ea      	b.n	8003680 <_svfiprintf_r+0x1b0>
 80036aa:	bf00      	nop
 80036ac:	08003c7c 	.word	0x08003c7c
 80036b0:	08003c82 	.word	0x08003c82
 80036b4:	08003c86 	.word	0x08003c86
 80036b8:	00000000 	.word	0x00000000
 80036bc:	0800341d 	.word	0x0800341d

080036c0 <_printf_common>:
 80036c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c4:	4691      	mov	r9, r2
 80036c6:	461f      	mov	r7, r3
 80036c8:	688a      	ldr	r2, [r1, #8]
 80036ca:	690b      	ldr	r3, [r1, #16]
 80036cc:	4606      	mov	r6, r0
 80036ce:	4293      	cmp	r3, r2
 80036d0:	bfb8      	it	lt
 80036d2:	4613      	movlt	r3, r2
 80036d4:	f8c9 3000 	str.w	r3, [r9]
 80036d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036dc:	460c      	mov	r4, r1
 80036de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036e2:	b112      	cbz	r2, 80036ea <_printf_common+0x2a>
 80036e4:	3301      	adds	r3, #1
 80036e6:	f8c9 3000 	str.w	r3, [r9]
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	0699      	lsls	r1, r3, #26
 80036ee:	bf42      	ittt	mi
 80036f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036f4:	3302      	addmi	r3, #2
 80036f6:	f8c9 3000 	strmi.w	r3, [r9]
 80036fa:	6825      	ldr	r5, [r4, #0]
 80036fc:	f015 0506 	ands.w	r5, r5, #6
 8003700:	d107      	bne.n	8003712 <_printf_common+0x52>
 8003702:	f104 0a19 	add.w	sl, r4, #25
 8003706:	68e3      	ldr	r3, [r4, #12]
 8003708:	f8d9 2000 	ldr.w	r2, [r9]
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	42ab      	cmp	r3, r5
 8003710:	dc29      	bgt.n	8003766 <_printf_common+0xa6>
 8003712:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	3300      	adds	r3, #0
 800371a:	bf18      	it	ne
 800371c:	2301      	movne	r3, #1
 800371e:	0692      	lsls	r2, r2, #26
 8003720:	d42e      	bmi.n	8003780 <_printf_common+0xc0>
 8003722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003726:	4639      	mov	r1, r7
 8003728:	4630      	mov	r0, r6
 800372a:	47c0      	blx	r8
 800372c:	3001      	adds	r0, #1
 800372e:	d021      	beq.n	8003774 <_printf_common+0xb4>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	68e5      	ldr	r5, [r4, #12]
 8003734:	f003 0306 	and.w	r3, r3, #6
 8003738:	2b04      	cmp	r3, #4
 800373a:	bf18      	it	ne
 800373c:	2500      	movne	r5, #0
 800373e:	f8d9 2000 	ldr.w	r2, [r9]
 8003742:	f04f 0900 	mov.w	r9, #0
 8003746:	bf08      	it	eq
 8003748:	1aad      	subeq	r5, r5, r2
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	6922      	ldr	r2, [r4, #16]
 800374e:	bf08      	it	eq
 8003750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003754:	4293      	cmp	r3, r2
 8003756:	bfc4      	itt	gt
 8003758:	1a9b      	subgt	r3, r3, r2
 800375a:	18ed      	addgt	r5, r5, r3
 800375c:	341a      	adds	r4, #26
 800375e:	454d      	cmp	r5, r9
 8003760:	d11a      	bne.n	8003798 <_printf_common+0xd8>
 8003762:	2000      	movs	r0, #0
 8003764:	e008      	b.n	8003778 <_printf_common+0xb8>
 8003766:	2301      	movs	r3, #1
 8003768:	4652      	mov	r2, sl
 800376a:	4639      	mov	r1, r7
 800376c:	4630      	mov	r0, r6
 800376e:	47c0      	blx	r8
 8003770:	3001      	adds	r0, #1
 8003772:	d103      	bne.n	800377c <_printf_common+0xbc>
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377c:	3501      	adds	r5, #1
 800377e:	e7c2      	b.n	8003706 <_printf_common+0x46>
 8003780:	2030      	movs	r0, #48	; 0x30
 8003782:	18e1      	adds	r1, r4, r3
 8003784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800378e:	4422      	add	r2, r4
 8003790:	3302      	adds	r3, #2
 8003792:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003796:	e7c4      	b.n	8003722 <_printf_common+0x62>
 8003798:	2301      	movs	r3, #1
 800379a:	4622      	mov	r2, r4
 800379c:	4639      	mov	r1, r7
 800379e:	4630      	mov	r0, r6
 80037a0:	47c0      	blx	r8
 80037a2:	3001      	adds	r0, #1
 80037a4:	d0e6      	beq.n	8003774 <_printf_common+0xb4>
 80037a6:	f109 0901 	add.w	r9, r9, #1
 80037aa:	e7d8      	b.n	800375e <_printf_common+0x9e>

080037ac <_printf_i>:
 80037ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037b4:	460c      	mov	r4, r1
 80037b6:	7e09      	ldrb	r1, [r1, #24]
 80037b8:	b085      	sub	sp, #20
 80037ba:	296e      	cmp	r1, #110	; 0x6e
 80037bc:	4617      	mov	r7, r2
 80037be:	4606      	mov	r6, r0
 80037c0:	4698      	mov	r8, r3
 80037c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037c4:	f000 80b3 	beq.w	800392e <_printf_i+0x182>
 80037c8:	d822      	bhi.n	8003810 <_printf_i+0x64>
 80037ca:	2963      	cmp	r1, #99	; 0x63
 80037cc:	d036      	beq.n	800383c <_printf_i+0x90>
 80037ce:	d80a      	bhi.n	80037e6 <_printf_i+0x3a>
 80037d0:	2900      	cmp	r1, #0
 80037d2:	f000 80b9 	beq.w	8003948 <_printf_i+0x19c>
 80037d6:	2958      	cmp	r1, #88	; 0x58
 80037d8:	f000 8083 	beq.w	80038e2 <_printf_i+0x136>
 80037dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037e4:	e032      	b.n	800384c <_printf_i+0xa0>
 80037e6:	2964      	cmp	r1, #100	; 0x64
 80037e8:	d001      	beq.n	80037ee <_printf_i+0x42>
 80037ea:	2969      	cmp	r1, #105	; 0x69
 80037ec:	d1f6      	bne.n	80037dc <_printf_i+0x30>
 80037ee:	6820      	ldr	r0, [r4, #0]
 80037f0:	6813      	ldr	r3, [r2, #0]
 80037f2:	0605      	lsls	r5, r0, #24
 80037f4:	f103 0104 	add.w	r1, r3, #4
 80037f8:	d52a      	bpl.n	8003850 <_printf_i+0xa4>
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6011      	str	r1, [r2, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da03      	bge.n	800380a <_printf_i+0x5e>
 8003802:	222d      	movs	r2, #45	; 0x2d
 8003804:	425b      	negs	r3, r3
 8003806:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800380a:	486f      	ldr	r0, [pc, #444]	; (80039c8 <_printf_i+0x21c>)
 800380c:	220a      	movs	r2, #10
 800380e:	e039      	b.n	8003884 <_printf_i+0xd8>
 8003810:	2973      	cmp	r1, #115	; 0x73
 8003812:	f000 809d 	beq.w	8003950 <_printf_i+0x1a4>
 8003816:	d808      	bhi.n	800382a <_printf_i+0x7e>
 8003818:	296f      	cmp	r1, #111	; 0x6f
 800381a:	d020      	beq.n	800385e <_printf_i+0xb2>
 800381c:	2970      	cmp	r1, #112	; 0x70
 800381e:	d1dd      	bne.n	80037dc <_printf_i+0x30>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	f043 0320 	orr.w	r3, r3, #32
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	e003      	b.n	8003832 <_printf_i+0x86>
 800382a:	2975      	cmp	r1, #117	; 0x75
 800382c:	d017      	beq.n	800385e <_printf_i+0xb2>
 800382e:	2978      	cmp	r1, #120	; 0x78
 8003830:	d1d4      	bne.n	80037dc <_printf_i+0x30>
 8003832:	2378      	movs	r3, #120	; 0x78
 8003834:	4865      	ldr	r0, [pc, #404]	; (80039cc <_printf_i+0x220>)
 8003836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800383a:	e055      	b.n	80038e8 <_printf_i+0x13c>
 800383c:	6813      	ldr	r3, [r2, #0]
 800383e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003842:	1d19      	adds	r1, r3, #4
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6011      	str	r1, [r2, #0]
 8003848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800384c:	2301      	movs	r3, #1
 800384e:	e08c      	b.n	800396a <_printf_i+0x1be>
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003856:	6011      	str	r1, [r2, #0]
 8003858:	bf18      	it	ne
 800385a:	b21b      	sxthne	r3, r3
 800385c:	e7cf      	b.n	80037fe <_printf_i+0x52>
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	6825      	ldr	r5, [r4, #0]
 8003862:	1d18      	adds	r0, r3, #4
 8003864:	6010      	str	r0, [r2, #0]
 8003866:	0628      	lsls	r0, r5, #24
 8003868:	d501      	bpl.n	800386e <_printf_i+0xc2>
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	e002      	b.n	8003874 <_printf_i+0xc8>
 800386e:	0668      	lsls	r0, r5, #25
 8003870:	d5fb      	bpl.n	800386a <_printf_i+0xbe>
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	296f      	cmp	r1, #111	; 0x6f
 8003876:	bf14      	ite	ne
 8003878:	220a      	movne	r2, #10
 800387a:	2208      	moveq	r2, #8
 800387c:	4852      	ldr	r0, [pc, #328]	; (80039c8 <_printf_i+0x21c>)
 800387e:	2100      	movs	r1, #0
 8003880:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003884:	6865      	ldr	r5, [r4, #4]
 8003886:	2d00      	cmp	r5, #0
 8003888:	60a5      	str	r5, [r4, #8]
 800388a:	f2c0 8095 	blt.w	80039b8 <_printf_i+0x20c>
 800388e:	6821      	ldr	r1, [r4, #0]
 8003890:	f021 0104 	bic.w	r1, r1, #4
 8003894:	6021      	str	r1, [r4, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d13d      	bne.n	8003916 <_printf_i+0x16a>
 800389a:	2d00      	cmp	r5, #0
 800389c:	f040 808e 	bne.w	80039bc <_printf_i+0x210>
 80038a0:	4665      	mov	r5, ip
 80038a2:	2a08      	cmp	r2, #8
 80038a4:	d10b      	bne.n	80038be <_printf_i+0x112>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	07db      	lsls	r3, r3, #31
 80038aa:	d508      	bpl.n	80038be <_printf_i+0x112>
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	6862      	ldr	r2, [r4, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	bfde      	ittt	le
 80038b4:	2330      	movle	r3, #48	; 0x30
 80038b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038be:	ebac 0305 	sub.w	r3, ip, r5
 80038c2:	6123      	str	r3, [r4, #16]
 80038c4:	f8cd 8000 	str.w	r8, [sp]
 80038c8:	463b      	mov	r3, r7
 80038ca:	aa03      	add	r2, sp, #12
 80038cc:	4621      	mov	r1, r4
 80038ce:	4630      	mov	r0, r6
 80038d0:	f7ff fef6 	bl	80036c0 <_printf_common>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d14d      	bne.n	8003974 <_printf_i+0x1c8>
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	b005      	add	sp, #20
 80038de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038e2:	4839      	ldr	r0, [pc, #228]	; (80039c8 <_printf_i+0x21c>)
 80038e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	6821      	ldr	r1, [r4, #0]
 80038ec:	1d1d      	adds	r5, r3, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6015      	str	r5, [r2, #0]
 80038f2:	060a      	lsls	r2, r1, #24
 80038f4:	d50b      	bpl.n	800390e <_printf_i+0x162>
 80038f6:	07ca      	lsls	r2, r1, #31
 80038f8:	bf44      	itt	mi
 80038fa:	f041 0120 	orrmi.w	r1, r1, #32
 80038fe:	6021      	strmi	r1, [r4, #0]
 8003900:	b91b      	cbnz	r3, 800390a <_printf_i+0x15e>
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	f022 0220 	bic.w	r2, r2, #32
 8003908:	6022      	str	r2, [r4, #0]
 800390a:	2210      	movs	r2, #16
 800390c:	e7b7      	b.n	800387e <_printf_i+0xd2>
 800390e:	064d      	lsls	r5, r1, #25
 8003910:	bf48      	it	mi
 8003912:	b29b      	uxthmi	r3, r3
 8003914:	e7ef      	b.n	80038f6 <_printf_i+0x14a>
 8003916:	4665      	mov	r5, ip
 8003918:	fbb3 f1f2 	udiv	r1, r3, r2
 800391c:	fb02 3311 	mls	r3, r2, r1, r3
 8003920:	5cc3      	ldrb	r3, [r0, r3]
 8003922:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003926:	460b      	mov	r3, r1
 8003928:	2900      	cmp	r1, #0
 800392a:	d1f5      	bne.n	8003918 <_printf_i+0x16c>
 800392c:	e7b9      	b.n	80038a2 <_printf_i+0xf6>
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	6825      	ldr	r5, [r4, #0]
 8003932:	1d18      	adds	r0, r3, #4
 8003934:	6961      	ldr	r1, [r4, #20]
 8003936:	6010      	str	r0, [r2, #0]
 8003938:	0628      	lsls	r0, r5, #24
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	d501      	bpl.n	8003942 <_printf_i+0x196>
 800393e:	6019      	str	r1, [r3, #0]
 8003940:	e002      	b.n	8003948 <_printf_i+0x19c>
 8003942:	066a      	lsls	r2, r5, #25
 8003944:	d5fb      	bpl.n	800393e <_printf_i+0x192>
 8003946:	8019      	strh	r1, [r3, #0]
 8003948:	2300      	movs	r3, #0
 800394a:	4665      	mov	r5, ip
 800394c:	6123      	str	r3, [r4, #16]
 800394e:	e7b9      	b.n	80038c4 <_printf_i+0x118>
 8003950:	6813      	ldr	r3, [r2, #0]
 8003952:	1d19      	adds	r1, r3, #4
 8003954:	6011      	str	r1, [r2, #0]
 8003956:	681d      	ldr	r5, [r3, #0]
 8003958:	6862      	ldr	r2, [r4, #4]
 800395a:	2100      	movs	r1, #0
 800395c:	4628      	mov	r0, r5
 800395e:	f000 f837 	bl	80039d0 <memchr>
 8003962:	b108      	cbz	r0, 8003968 <_printf_i+0x1bc>
 8003964:	1b40      	subs	r0, r0, r5
 8003966:	6060      	str	r0, [r4, #4]
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	6123      	str	r3, [r4, #16]
 800396c:	2300      	movs	r3, #0
 800396e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003972:	e7a7      	b.n	80038c4 <_printf_i+0x118>
 8003974:	6923      	ldr	r3, [r4, #16]
 8003976:	462a      	mov	r2, r5
 8003978:	4639      	mov	r1, r7
 800397a:	4630      	mov	r0, r6
 800397c:	47c0      	blx	r8
 800397e:	3001      	adds	r0, #1
 8003980:	d0aa      	beq.n	80038d8 <_printf_i+0x12c>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	079b      	lsls	r3, r3, #30
 8003986:	d413      	bmi.n	80039b0 <_printf_i+0x204>
 8003988:	68e0      	ldr	r0, [r4, #12]
 800398a:	9b03      	ldr	r3, [sp, #12]
 800398c:	4298      	cmp	r0, r3
 800398e:	bfb8      	it	lt
 8003990:	4618      	movlt	r0, r3
 8003992:	e7a3      	b.n	80038dc <_printf_i+0x130>
 8003994:	2301      	movs	r3, #1
 8003996:	464a      	mov	r2, r9
 8003998:	4639      	mov	r1, r7
 800399a:	4630      	mov	r0, r6
 800399c:	47c0      	blx	r8
 800399e:	3001      	adds	r0, #1
 80039a0:	d09a      	beq.n	80038d8 <_printf_i+0x12c>
 80039a2:	3501      	adds	r5, #1
 80039a4:	68e3      	ldr	r3, [r4, #12]
 80039a6:	9a03      	ldr	r2, [sp, #12]
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	42ab      	cmp	r3, r5
 80039ac:	dcf2      	bgt.n	8003994 <_printf_i+0x1e8>
 80039ae:	e7eb      	b.n	8003988 <_printf_i+0x1dc>
 80039b0:	2500      	movs	r5, #0
 80039b2:	f104 0919 	add.w	r9, r4, #25
 80039b6:	e7f5      	b.n	80039a4 <_printf_i+0x1f8>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ac      	bne.n	8003916 <_printf_i+0x16a>
 80039bc:	7803      	ldrb	r3, [r0, #0]
 80039be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039c6:	e76c      	b.n	80038a2 <_printf_i+0xf6>
 80039c8:	08003c8d 	.word	0x08003c8d
 80039cc:	08003c9e 	.word	0x08003c9e

080039d0 <memchr>:
 80039d0:	b510      	push	{r4, lr}
 80039d2:	b2c9      	uxtb	r1, r1
 80039d4:	4402      	add	r2, r0
 80039d6:	4290      	cmp	r0, r2
 80039d8:	4603      	mov	r3, r0
 80039da:	d101      	bne.n	80039e0 <memchr+0x10>
 80039dc:	2300      	movs	r3, #0
 80039de:	e003      	b.n	80039e8 <memchr+0x18>
 80039e0:	781c      	ldrb	r4, [r3, #0]
 80039e2:	3001      	adds	r0, #1
 80039e4:	428c      	cmp	r4, r1
 80039e6:	d1f6      	bne.n	80039d6 <memchr+0x6>
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd10      	pop	{r4, pc}

080039ec <memcpy>:
 80039ec:	b510      	push	{r4, lr}
 80039ee:	1e43      	subs	r3, r0, #1
 80039f0:	440a      	add	r2, r1
 80039f2:	4291      	cmp	r1, r2
 80039f4:	d100      	bne.n	80039f8 <memcpy+0xc>
 80039f6:	bd10      	pop	{r4, pc}
 80039f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a00:	e7f7      	b.n	80039f2 <memcpy+0x6>

08003a02 <memmove>:
 8003a02:	4288      	cmp	r0, r1
 8003a04:	b510      	push	{r4, lr}
 8003a06:	eb01 0302 	add.w	r3, r1, r2
 8003a0a:	d807      	bhi.n	8003a1c <memmove+0x1a>
 8003a0c:	1e42      	subs	r2, r0, #1
 8003a0e:	4299      	cmp	r1, r3
 8003a10:	d00a      	beq.n	8003a28 <memmove+0x26>
 8003a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a1a:	e7f8      	b.n	8003a0e <memmove+0xc>
 8003a1c:	4283      	cmp	r3, r0
 8003a1e:	d9f5      	bls.n	8003a0c <memmove+0xa>
 8003a20:	1881      	adds	r1, r0, r2
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	42d3      	cmn	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memmove+0x28>
 8003a28:	bd10      	pop	{r4, pc}
 8003a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a32:	e7f7      	b.n	8003a24 <memmove+0x22>

08003a34 <_free_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4605      	mov	r5, r0
 8003a38:	2900      	cmp	r1, #0
 8003a3a:	d043      	beq.n	8003ac4 <_free_r+0x90>
 8003a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a40:	1f0c      	subs	r4, r1, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bfb8      	it	lt
 8003a46:	18e4      	addlt	r4, r4, r3
 8003a48:	f000 f8d0 	bl	8003bec <__malloc_lock>
 8003a4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <_free_r+0x94>)
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	4610      	mov	r0, r2
 8003a52:	b933      	cbnz	r3, 8003a62 <_free_r+0x2e>
 8003a54:	6063      	str	r3, [r4, #4]
 8003a56:	6014      	str	r4, [r2, #0]
 8003a58:	4628      	mov	r0, r5
 8003a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a5e:	f000 b8c6 	b.w	8003bee <__malloc_unlock>
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	d90b      	bls.n	8003a7e <_free_r+0x4a>
 8003a66:	6821      	ldr	r1, [r4, #0]
 8003a68:	1862      	adds	r2, r4, r1
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	bf01      	itttt	eq
 8003a6e:	681a      	ldreq	r2, [r3, #0]
 8003a70:	685b      	ldreq	r3, [r3, #4]
 8003a72:	1852      	addeq	r2, r2, r1
 8003a74:	6022      	streq	r2, [r4, #0]
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	6004      	str	r4, [r0, #0]
 8003a7a:	e7ed      	b.n	8003a58 <_free_r+0x24>
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	b10a      	cbz	r2, 8003a86 <_free_r+0x52>
 8003a82:	42a2      	cmp	r2, r4
 8003a84:	d9fa      	bls.n	8003a7c <_free_r+0x48>
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	1858      	adds	r0, r3, r1
 8003a8a:	42a0      	cmp	r0, r4
 8003a8c:	d10b      	bne.n	8003aa6 <_free_r+0x72>
 8003a8e:	6820      	ldr	r0, [r4, #0]
 8003a90:	4401      	add	r1, r0
 8003a92:	1858      	adds	r0, r3, r1
 8003a94:	4282      	cmp	r2, r0
 8003a96:	6019      	str	r1, [r3, #0]
 8003a98:	d1de      	bne.n	8003a58 <_free_r+0x24>
 8003a9a:	6810      	ldr	r0, [r2, #0]
 8003a9c:	6852      	ldr	r2, [r2, #4]
 8003a9e:	4401      	add	r1, r0
 8003aa0:	6019      	str	r1, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	e7d8      	b.n	8003a58 <_free_r+0x24>
 8003aa6:	d902      	bls.n	8003aae <_free_r+0x7a>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	e7d4      	b.n	8003a58 <_free_r+0x24>
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	1821      	adds	r1, r4, r0
 8003ab2:	428a      	cmp	r2, r1
 8003ab4:	bf01      	itttt	eq
 8003ab6:	6811      	ldreq	r1, [r2, #0]
 8003ab8:	6852      	ldreq	r2, [r2, #4]
 8003aba:	1809      	addeq	r1, r1, r0
 8003abc:	6021      	streq	r1, [r4, #0]
 8003abe:	6062      	str	r2, [r4, #4]
 8003ac0:	605c      	str	r4, [r3, #4]
 8003ac2:	e7c9      	b.n	8003a58 <_free_r+0x24>
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
 8003ac6:	bf00      	nop
 8003ac8:	200000b8 	.word	0x200000b8

08003acc <_malloc_r>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	1ccd      	adds	r5, r1, #3
 8003ad0:	f025 0503 	bic.w	r5, r5, #3
 8003ad4:	3508      	adds	r5, #8
 8003ad6:	2d0c      	cmp	r5, #12
 8003ad8:	bf38      	it	cc
 8003ada:	250c      	movcc	r5, #12
 8003adc:	2d00      	cmp	r5, #0
 8003ade:	4606      	mov	r6, r0
 8003ae0:	db01      	blt.n	8003ae6 <_malloc_r+0x1a>
 8003ae2:	42a9      	cmp	r1, r5
 8003ae4:	d903      	bls.n	8003aee <_malloc_r+0x22>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	2000      	movs	r0, #0
 8003aec:	bd70      	pop	{r4, r5, r6, pc}
 8003aee:	f000 f87d 	bl	8003bec <__malloc_lock>
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <_malloc_r+0xac>)
 8003af4:	6814      	ldr	r4, [r2, #0]
 8003af6:	4621      	mov	r1, r4
 8003af8:	b991      	cbnz	r1, 8003b20 <_malloc_r+0x54>
 8003afa:	4c20      	ldr	r4, [pc, #128]	; (8003b7c <_malloc_r+0xb0>)
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	b91b      	cbnz	r3, 8003b08 <_malloc_r+0x3c>
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 f863 	bl	8003bcc <_sbrk_r>
 8003b06:	6020      	str	r0, [r4, #0]
 8003b08:	4629      	mov	r1, r5
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f000 f85e 	bl	8003bcc <_sbrk_r>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d124      	bne.n	8003b5e <_malloc_r+0x92>
 8003b14:	230c      	movs	r3, #12
 8003b16:	4630      	mov	r0, r6
 8003b18:	6033      	str	r3, [r6, #0]
 8003b1a:	f000 f868 	bl	8003bee <__malloc_unlock>
 8003b1e:	e7e4      	b.n	8003aea <_malloc_r+0x1e>
 8003b20:	680b      	ldr	r3, [r1, #0]
 8003b22:	1b5b      	subs	r3, r3, r5
 8003b24:	d418      	bmi.n	8003b58 <_malloc_r+0x8c>
 8003b26:	2b0b      	cmp	r3, #11
 8003b28:	d90f      	bls.n	8003b4a <_malloc_r+0x7e>
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	18cc      	adds	r4, r1, r3
 8003b2e:	50cd      	str	r5, [r1, r3]
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 f85c 	bl	8003bee <__malloc_unlock>
 8003b36:	f104 000b 	add.w	r0, r4, #11
 8003b3a:	1d23      	adds	r3, r4, #4
 8003b3c:	f020 0007 	bic.w	r0, r0, #7
 8003b40:	1ac3      	subs	r3, r0, r3
 8003b42:	d0d3      	beq.n	8003aec <_malloc_r+0x20>
 8003b44:	425a      	negs	r2, r3
 8003b46:	50e2      	str	r2, [r4, r3]
 8003b48:	e7d0      	b.n	8003aec <_malloc_r+0x20>
 8003b4a:	684b      	ldr	r3, [r1, #4]
 8003b4c:	428c      	cmp	r4, r1
 8003b4e:	bf16      	itet	ne
 8003b50:	6063      	strne	r3, [r4, #4]
 8003b52:	6013      	streq	r3, [r2, #0]
 8003b54:	460c      	movne	r4, r1
 8003b56:	e7eb      	b.n	8003b30 <_malloc_r+0x64>
 8003b58:	460c      	mov	r4, r1
 8003b5a:	6849      	ldr	r1, [r1, #4]
 8003b5c:	e7cc      	b.n	8003af8 <_malloc_r+0x2c>
 8003b5e:	1cc4      	adds	r4, r0, #3
 8003b60:	f024 0403 	bic.w	r4, r4, #3
 8003b64:	42a0      	cmp	r0, r4
 8003b66:	d005      	beq.n	8003b74 <_malloc_r+0xa8>
 8003b68:	1a21      	subs	r1, r4, r0
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f000 f82e 	bl	8003bcc <_sbrk_r>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d0cf      	beq.n	8003b14 <_malloc_r+0x48>
 8003b74:	6025      	str	r5, [r4, #0]
 8003b76:	e7db      	b.n	8003b30 <_malloc_r+0x64>
 8003b78:	200000b8 	.word	0x200000b8
 8003b7c:	200000bc 	.word	0x200000bc

08003b80 <_realloc_r>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	4607      	mov	r7, r0
 8003b84:	4614      	mov	r4, r2
 8003b86:	460e      	mov	r6, r1
 8003b88:	b921      	cbnz	r1, 8003b94 <_realloc_r+0x14>
 8003b8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b8e:	4611      	mov	r1, r2
 8003b90:	f7ff bf9c 	b.w	8003acc <_malloc_r>
 8003b94:	b922      	cbnz	r2, 8003ba0 <_realloc_r+0x20>
 8003b96:	f7ff ff4d 	bl	8003a34 <_free_r>
 8003b9a:	4625      	mov	r5, r4
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba0:	f000 f826 	bl	8003bf0 <_malloc_usable_size_r>
 8003ba4:	42a0      	cmp	r0, r4
 8003ba6:	d20f      	bcs.n	8003bc8 <_realloc_r+0x48>
 8003ba8:	4621      	mov	r1, r4
 8003baa:	4638      	mov	r0, r7
 8003bac:	f7ff ff8e 	bl	8003acc <_malloc_r>
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d0f2      	beq.n	8003b9c <_realloc_r+0x1c>
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	4622      	mov	r2, r4
 8003bba:	f7ff ff17 	bl	80039ec <memcpy>
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	f7ff ff37 	bl	8003a34 <_free_r>
 8003bc6:	e7e9      	b.n	8003b9c <_realloc_r+0x1c>
 8003bc8:	4635      	mov	r5, r6
 8003bca:	e7e7      	b.n	8003b9c <_realloc_r+0x1c>

08003bcc <_sbrk_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	2300      	movs	r3, #0
 8003bd0:	4c05      	ldr	r4, [pc, #20]	; (8003be8 <_sbrk_r+0x1c>)
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	6023      	str	r3, [r4, #0]
 8003bd8:	f7fd fbcc 	bl	8001374 <_sbrk>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_sbrk_r+0x1a>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_sbrk_r+0x1a>
 8003be4:	602b      	str	r3, [r5, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	200001c4 	.word	0x200001c4

08003bec <__malloc_lock>:
 8003bec:	4770      	bx	lr

08003bee <__malloc_unlock>:
 8003bee:	4770      	bx	lr

08003bf0 <_malloc_usable_size_r>:
 8003bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf4:	1f18      	subs	r0, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bfbc      	itt	lt
 8003bfa:	580b      	ldrlt	r3, [r1, r0]
 8003bfc:	18c0      	addlt	r0, r0, r3
 8003bfe:	4770      	bx	lr

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
